{
    "version": "https://jsonfeed.org/version/1",
    "title": "wuyp's blog",
    "description": "wuyp's blog",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/07/14/SpringBoot/",
            "url": "http://example.com/2021/07/14/SpringBoot/",
            "title": "SpringBoot2",
            "date_published": "2021-07-14T12:16:26.366Z",
            "content_html": "<h1 id=\"SpringBoot2核心技术\"><a href=\"#SpringBoot2核心技术\" class=\"headerlink\" title=\"SpringBoot2核心技术\"></a>SpringBoot2核心技术</h1><h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><ul>\n<li>can do<ul>\n<li>Microservices</li>\n<li>Reactive</li>\n<li>CLoud</li>\n<li>Web apps</li>\n<li>Serverless</li>\n<li>Event Driven</li>\n<li>Batch</li>\n</ul>\n</li>\n</ul>\n<p>Spring框架</p>\n<p>Spring生态圈</p>\n<p>基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p>\n<ul>\n<li>创建独立Spring应用</li>\n<li>内嵌web服务器</li>\n<li>自动starter依赖，简化构建配置</li>\n<li>自动配置Spring以及第三方功能</li>\n<li>提供生产级别的监控、健康检查及外部化配置</li>\n<li>无代码生成、无需编写XML</li>\n</ul>\n<p>Springboot是整合Spring技术栈的一站式框架</p>\n<p>Springboot是简化Spring技术栈的快速开发脚手架</p>\n<p>微服务</p>\n<ul>\n<li>微服务是一种架构风格</li>\n<li>一个应用拆分为一组小型服务</li>\n<li>每个服务运行在自己的进程内，也就是可独立部署和升级</li>\n<li>服务之间使用轻量级HTTP交互</li>\n<li>服务围绕业务功能拆分</li>\n<li>可以由全自动部署机制独立部署</li>\n<li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li>\n</ul>\n<p>分布式</p>\n<ul>\n<li>远程调用</li>\n<li>服务发现</li>\n<li>负载均衡</li>\n<li>服务容错</li>\n<li>配置管理</li>\n<li>服务监控</li>\n<li>链路追踪</li>\n<li>日志管理</li>\n<li>任务调度</li>\n<li>……</li>\n</ul>\n<p>分布式的解决</p>\n<ul>\n<li>Springboot+Springcloud</li>\n</ul>\n<p>云原生</p>\n<p>原生应用如何上云。cloud native</p>\n<p>上云的困难</p>\n<ul>\n<li>服务自愈</li>\n<li>弹性伸缩</li>\n<li>服务隔离</li>\n<li>自动化部署</li>\n<li>灰度发布</li>\n<li>流量治理</li>\n<li>……</li>\n</ul>\n<p>上云的解决</p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/SpringBoot_20210714214900.png\" alt=\"image-20210714214843942\"></p>\n<h1 id=\"SpringBoot2响应式编程\"><a href=\"#SpringBoot2响应式编程\" class=\"headerlink\" title=\"SpringBoot2响应式编程\"></a>SpringBoot2响应式编程</h1>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/11/Java%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/2021/06/11/Java%E5%9F%BA%E7%A1%80/",
            "title": "Java基础",
            "date_published": "2021-06-11T02:26:33.823Z",
            "content_html": "<h1 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h1><h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/Java_20211109201325.png\" alt=\"Java基础\"></p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>Java语言是美国Sun公司 Stanford university network 1995年推出的高级编程语言。所谓编程语言，是计算机语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们的需求。</p>\n<ul>\n<li>发展历程<ul>\n<li>1995年Sun公司发布了Java1.0版本</li>\n<li>2004年发布Java5 版本</li>\n<li>2009年oracle甲骨文公司收购了Sun公司</li>\n<li>2014年发布了Java8版本</li>\n<li>2018年3月发布了Java10版本</li>\n</ul>\n</li>\n<li>应用<ul>\n<li>互联网程序的开发领域</li>\n<li>大数据</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"计算机基础知识\"><a href=\"#计算机基础知识\" class=\"headerlink\" title=\"计算机基础知识\"></a>计算机基础知识</h2><h3 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h3><p>计算机中全部采用二进制。</p>\n<ul>\n<li>二进制<ul>\n<li>它只包含0、1两个数字，逢二进一。</li>\n<li>十进制和二进制的转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字节\"><a href=\"#字节\" class=\"headerlink\" title=\"字节\"></a>字节</h3><p>字节是常见的计算机最小的存储单元。</p>\n<p>位 bit : 一个数字0或者一个数字1，代表一位</p>\n<p>字节 Byte : 每逢8位是一个字节，这是数据存储的最小单位。</p>\n<p>1Byte = 8 bit</p>\n<p>1MB = 1024 KB</p>\n<p>GB</p>\n<p>TB</p>\n<p>TB</p>\n<p>EB</p>\n<p>ZB</p>\n<h3 id=\"命令提示符\"><a href=\"#命令提示符\" class=\"headerlink\" title=\"命令提示符\"></a>命令提示符</h3><h3 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h3><p>Java虚拟机JVM</p>\n<ul>\n<li>JVM<ul>\n<li>Java虚拟机，是运行所有Java程序的假想计算机，是Java程序的运行环境。我们编写的Java代码，都运行在JVM上。</li>\n<li>跨平台：任何软件的运行，都必须要运行在操作系统上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性就是Java语言的跨平台特性。该特性由Java实现，我们编写的程序运行在JVM上，而JVM运行在操作系统上</li>\n<li>Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JRE、JDK\"><a href=\"#JRE、JDK\" class=\"headerlink\" title=\"JRE、JDK\"></a>JRE、JDK</h3><ul>\n<li>JRE<ul>\n<li>是Java程序的运行环境，包含JVM和运行时所需要的核心类库。</li>\n</ul>\n</li>\n<li>JDK<ul>\n<li>是Java程序开发的恶工具包，包含JRE和开发人员使用的工具。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java安装和环境变量配置-略\"><a href=\"#Java安装和环境变量配置-略\" class=\"headerlink\" title=\"Java安装和环境变量配置(略)\"></a>Java安装和环境变量配置(略)</h3><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>单行注释</li>\n<li>多行注释</li>\n<li>文档注释<ul>\n<li>文档注释以<code>/**</code> 开头，以<code>*/</code>结束。</li>\n<li>Javadoc生成API帮助文档，Java帮助文档主要用来说明类、成员变量和方法的功能。Javadoc可以从程序源代码中抽取类、方法、成员等注释，然后形成一个和源代码配套的API帮助文档。</li>\n<li>API帮助文档相当于产品说明书，而说明书只需要介绍那些供用户使用的部分，所以Javadoc默认只提取public、protected修饰的部分，如果要提取private修饰的部分，需要使用-private。</li>\n</ul>\n</li>\n</ul>\n<p>Javadoc 工具可以识别文档注释中的一些特殊标签，这些标签一般以<code>@</code>开头，后跟一个指定的名字，有的也以<code>&#123;@</code>开头，以<code>&#125;</code>结束。Javadoc 可以识别的标签如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@author</td>\n<td>标识一个类的作者，一般用于类注释</td>\n<td>@author description</td>\n</tr>\n<tr>\n<td>@deprecated</td>\n<td>指名一个过期的类或成员，表明该类或方法不建议使用</td>\n<td>@deprecated description</td>\n</tr>\n<tr>\n<td>{@docRoot}</td>\n<td>指明当前文档根目录的路径</td>\n<td>Directory Path</td>\n</tr>\n<tr>\n<td>@exception</td>\n<td>可能抛出异常的说明，一般用于方法注释</td>\n<td>@exception exception-name explanation</td>\n</tr>\n<tr>\n<td>{@inheritDoc}</td>\n<td>从直接父类继承的注释</td>\n<td>Inherits a comment from the immediate surperclass.</td>\n</tr>\n<tr>\n<td>{@link}</td>\n<td>插入一个到另一个主题的链接</td>\n<td>{@link name text}</td>\n</tr>\n<tr>\n<td>{@linkplain}</td>\n<td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>\n<td>Inserts an in-line link to another topic.</td>\n</tr>\n<tr>\n<td>@param</td>\n<td>说明一个方法的参数，一般用于方法注释</td>\n<td>@param parameter-name explanation</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>说明返回值类型，一般用于方法注释，不能出现再构造方法中</td>\n<td>@return explanation</td>\n</tr>\n<tr>\n<td>@see</td>\n<td>指定一个到另一个主题的链接</td>\n<td>@see anchor</td>\n</tr>\n<tr>\n<td>@serial</td>\n<td>说明一个序列化属性</td>\n<td>@serial description</td>\n</tr>\n<tr>\n<td>@serialData</td>\n<td>说明通过 writeObject() 和 writeExternal() 方法写的数据</td>\n<td>@serialData description</td>\n</tr>\n<tr>\n<td>@serialField</td>\n<td>说明一个 ObjectStreamField 组件</td>\n<td>@serialField name type description</td>\n</tr>\n<tr>\n<td>@since</td>\n<td>说明从哪个版本起开始有了这个函数</td>\n<td>@since release</td>\n</tr>\n<tr>\n<td>@throws</td>\n<td>和 @exception 标签一样.</td>\n<td>The @throws tag has the same meaning as the @exception tag.</td>\n</tr>\n<tr>\n<td>{@value}</td>\n<td>显示常量的值，该常量必须是 static 属性。</td>\n<td>Displays the value of a constant, which must be a static field.</td>\n</tr>\n<tr>\n<td>@version</td>\n<td>指定类的版本，一般用于类注释</td>\n<td>@version info</td>\n</tr>\n</tbody></table>\n<p>对两种标签格式的说明：</p>\n<ul>\n<li>@tag 格式的标签（不被<code>&#123; &#125;</code>包围的标签）为块标签，只能在主要描述（类注释中对该类的详细说明为主要描述）后面的标签部分（如果块标签放在主要描述的前面，则生成 API 帮助文档时会检测不到主要描述）。</li>\n<li>{@tag} 格式的标签（由<code>&#123; &#125;</code>包围的标签）为内联标签，可以放在主要描述中的任何位置或块标签的注释中。</li>\n</ul>\n<p>Javadoc 标签注意事项：</p>\n<ul>\n<li>Javadoc 标签必须从一行的开头开始，否则将被视为普通文本。</li>\n<li>一般具有相同名称的标签放在一起。</li>\n<li>Javadoc 标签区分大小写，代码中对于大小写错误的标签不会发生编译错误，但是在生成 API 帮助文档时会检测不到该注释内容。</li>\n</ul>\n<h4 id=\"Javadoc命令\"><a href=\"#Javadoc命令\" class=\"headerlink\" title=\"Javadoc命令\"></a>Javadoc命令</h4><p>Javadoc 用法格式如下：</p>\n<p>javadoc [options] [packagenames] [sourcefiles]</p>\n<p>对格式的说明：</p>\n<ul>\n<li>options 表示 Javadoc 命令的选项；</li>\n<li>packagenames 表示包名；</li>\n<li>sourcefiles 表示源文件名。</li>\n</ul>\n<p>在 cmd（命令提示符）中输入<code>javadoc -help</code>就可以看到 Javadoc 的用法和选项（前提是安装配置了JDK），下面列举 Javadoc 命令的常用选项：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-public</td>\n<td>仅显示 public 类和成员</td>\n</tr>\n<tr>\n<td>-protected</td>\n<td>显示 protected/public 类和成员（默认值）</td>\n</tr>\n<tr>\n<td>-package</td>\n<td>显示 package/protected/public 类和成员</td>\n</tr>\n<tr>\n<td>-private</td>\n<td>显示所有类和成员</td>\n</tr>\n<tr>\n<td>-d <directory></td>\n<td>输出文件的目标目录</td>\n</tr>\n<tr>\n<td>-version</td>\n<td>包含 @version 段</td>\n</tr>\n<tr>\n<td>-author</td>\n<td>包含 @author 段</td>\n</tr>\n<tr>\n<td>-splitindex</td>\n<td>将索引分为每个字母对应一个文件</td>\n</tr>\n<tr>\n<td>-windowtitle <text></td>\n<td>文档的浏览器窗口标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"文档注释的格式\"><a href=\"#文档注释的格式\" class=\"headerlink\" title=\"文档注释的格式\"></a>文档注释的格式</h4><p>在编写文档注释的过程中，有时需要添加 HTML 标签，比如：需要换行时，应该使用<code>&lt;br&gt;</code>，而不是一个回车符；需要分段时，应该使用<code>&lt;p&gt;</code>。</p>\n<p>Javadoc 并不是将代码中的文档注释直接复制到帮助文档的 HTML 文件中，而是读取每一行后，删除前面的<code>*</code>号及<code>*</code>以前的空格再输入到 HTML 文档。</p>\n<p>/**<br>* first line.<br>******* second line.<br>* third line.<br>*/</p>\n<p>编译输出后的 HTML 源码如下所示。</p>\n<p>first line. <br><br>second line. <br><br>third line.</p>\n<p>注释前面的<code>*</code>号允许连续使用多个，其效果和使用一个<code>*</code>号一样，但多个<code>*</code>前不能有其他字符分隔，否则分隔符及后面的<code>*</code>号都将作为文档的内容。</p>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>特点<ul>\n<li>完全小写的字母</li>\n<li>增强版记事本🗒️有特殊颜色</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>命名规则<ul>\n<li>包含英文26个字母(区分大小写)、数字、美元符号$、下划线_</li>\n<li>不能以数字开头</li>\n<li>不能是关键字</li>\n</ul>\n</li>\n<li>命名规范<ul>\n<li>类名规范<ul>\n<li>首字母大写，后面每个单词首字母大写(大驼峰式)</li>\n</ul>\n</li>\n<li>变量名规范<ul>\n<li>首字母小写，后面每个单词首字母大写(小驼峰式)</li>\n</ul>\n</li>\n<li>方法名规范：同变量名</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>Java程序运行期间固定不变的量。</p>\n<ul>\n<li>字符串常量 ： 双引号</li>\n<li>整数常量：直接写上的数字，没有小数点</li>\n<li>浮点数常量：直接写上的数字，有小数点</li>\n<li>字符常量：单引号引起来的单个字符。两个 单引号中间必须有且仅有一个字符，多个不行。</li>\n<li>布尔常量：true、false</li>\n<li>空常量：null 代表没有任何数据。空常量不能直接用来打印输出。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>基本数据类型 四类八种<ul>\n<li>整数型 byte short int long</li>\n<li>浮点型 float double</li>\n<li>字符型 char 内存占用2个字节</li>\n<li>布尔型 boolean</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th></th>\n<th>内存占有</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字节型</td>\n<td>byte</td>\n<td>1个字节</td>\n<td>-128～127</td>\n</tr>\n<tr>\n<td>短整型</td>\n<td>short</td>\n<td>2个字节</td>\n<td></td>\n</tr>\n<tr>\n<td>整型</td>\n<td>int</td>\n<td>4个字节</td>\n<td></td>\n</tr>\n<tr>\n<td>长整型</td>\n<td>long</td>\n<td>8个字节</td>\n<td></td>\n</tr>\n<tr>\n<td>单精度浮点数</td>\n<td>float</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>双精度浮点数</td>\n<td>double</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>字符型</td>\n<td>char</td>\n<td>2</td>\n<td>0～65535</td>\n</tr>\n<tr>\n<td>布尔型</td>\n<td>boolean</td>\n<td>1</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<ul>\n<li>引用数据类型<ul>\n<li>字符串、数组、类、接口、lambda</li>\n</ul>\n</li>\n</ul>\n<p>说明</p>\n<p>1、字符串不是基本类型、而是引用类型</p>\n<p>2、浮点型只是一个近似值，并非精确的值</p>\n<p>3、数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节</p>\n<p>4、浮点数默认类型是double，如果要使用float类型，需要加上后缀F；</p>\n<p>​    如果是整数，默认是int类型，如果要使用long类型，需要加上后缀L。推荐使用大写字母后缀。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>程序运行期间，内容可以发生改变的量。</p>\n<p>数据类型  变量名称 ;</p>\n<p>变量名称 = 数据值 ;</p>\n<p>数据类型   变量名称  = 数据值 ;</p>\n<p>说明：</p>\n<p>char类型可以写入一个中文字。</p>\n<p>1、如果创建多个变量，那么变量之间的名称不可以重复</p>\n<p>2、对于float和long类型来说，字符后缀F和L不要丢掉</p>\n<p>3、如果使用byte或者short类型的变量，那么右侧的数据值不能超过左侧类型的范围 </p>\n<p>4、没有进行复制的变量，不能直接使用，一定要赋值之后，才能使用</p>\n<p>5、变量的使用不能超过作用域范围 【作用域：从定义变量的哪一行开始，一直到直接所属的大括号结束为止】</p>\n<p>6、可以通过一个语句来创建多个变量，但是一般不推荐。</p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p>当数据类型不一致时，将会发生数据类型转换。</p>\n<ul>\n<li>自动转换(隐氏)<ul>\n<li>数据范围从小到大</li>\n<li>代码不需要进行特殊处理，自动完成。</li>\n</ul>\n</li>\n<li>强制转换<ul>\n<li>范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据</li>\n<li>一般不推荐使用，因为有可能发生精度损失、数据溢出。</li>\n<li>byte/short/char 这三种类型都可以发生数学运算，例如加法”+”</li>\n<li>byte/short/char 这三种类型在运算的时候，都会被首先提升为int类型，然后再计算。</li>\n<li>boolean 类型不能发生数据类型转换。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h3><p>数字和常见字符的对应关系</p>\n<p>ASCII码表：美国信息交换标准代码</p>\n<p>Unicode码表：万国表。也是数字和符号的对照关系，开头0-127和ascii完全一样。包含从128开始的更多字符。</p>\n<table>\n<thead>\n<tr>\n<th>48</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>65</td>\n<td>A</td>\n</tr>\n<tr>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>20013</td>\n<td>中</td>\n</tr>\n</tbody></table>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>运算符：进行特定操作的符号</p>\n<p>表达式：</p>\n<ul>\n<li>算数运算符<ul>\n<li>四则运算 + 取模 %(取余数)<ul>\n<li>对于一个整数的表达式来说，除数用的是整除，整数除以整数，结果仍然是整数，只看商，不看余数。</li>\n</ul>\n</li>\n<li>加号➕<ul>\n<li>对于数值来说，就是加法</li>\n<li>对于字符char类型来说，在计算之前，char会被提升成为int ，然后再计算</li>\n<li>对于字符串String，加号代表字符串连接操作。</li>\n</ul>\n</li>\n<li>自增<ul>\n<li>++</li>\n</ul>\n</li>\n<li>自减<ul>\n<li>–</li>\n<li>单独使用，前++和后++没有任何区别。</li>\n<li>混合使用<ul>\n<li>【前++】，那么变量先+1，然后拿着结果进行使用。【先加后用】</li>\n<li>【后++】，那么首先使用变量原来的值，然后再让变量+1。【先用后加】</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>赋值运算符  =      +=       * =       / =       - =       % =<ul>\n<li>复合赋值运算符其中隐含了一个强制类型转换。</li>\n</ul>\n</li>\n<li>比较运算符     ==         &lt;          &gt;       &lt;=        &gt;=         !=<ul>\n<li>比较运算符的结果一定是一个boolean值</li>\n<li>如果进行多次判断，不能连着写。</li>\n</ul>\n</li>\n<li>逻辑运算符        &amp;&amp;      ||      !<ul>\n<li>具有短路效果，如果根据左边已经可以判断得到的最终结果，那么右边的代码将不再执行，从而节省一定的性能。</li>\n</ul>\n</li>\n<li>三元运算符              <ul>\n<li>数据类型    变量名称      =    条件判断     ?      表达式A        :           表达式B</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>方法名称的命名规则和变量一样，使用小驼峰。</p>\n<p>方法体：也就是大括号当中可以包含任意条语句</p>\n<p>说明：</p>\n<p>1、方法定义的先后顺序无所谓</p>\n<p>2、方法的定义不能产生嵌套包含关系</p>\n<p>3、方法定义好了之后，不会执行。如果想要执行，一定要进行方法的【调用】</p>\n<ul>\n<li>参数<ul>\n<li>有参数</li>\n<li>无参数</li>\n</ul>\n</li>\n<li>返回值<ul>\n<li>有返回值</li>\n<li>无返回值</li>\n</ul>\n</li>\n</ul>\n<p>修饰符 返回值类型 方法名称(参数类型 参数名称 ,  … ) {方法体 ; return 返回值 ; }</p>\n<p>调用方法—-找到方法—-参数传递—-执方法体—-带着返回值回到方法的调用处</p>\n<p>调用方法—-找到方法—-传递参数—-执行方法体—-直接结束</p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><p>方法名称();</p>\n<h3 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h3><p> 多个方法的名称一样，但是参数列表不一样。</p>\n<p>1.参数个数不同</p>\n<p>2.参数类型不同</p>\n<p>3.参数的多类型顺序不同</p>\n<h2 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h2><ul>\n<li>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器会自动隐含地为我们补上一个 (byte)/(shor)/(char)</li>\n<li>在给变量进行赋值的时候，如果右侧的表达式当中全都是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。== 编译器的常量优化。</li>\n</ul>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><h3 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h3><h3 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h3><ul>\n<li><p>判断语句 if</p>\n<ul>\n<li>if…..else if……else……</li>\n<li>三元运算符</li>\n</ul>\n</li>\n<li><p>switch</p>\n<ul>\n<li>表达式<ul>\n<li>基本数据类型</li>\n<li>String字符串、enum枚举</li>\n</ul>\n</li>\n<li>语句灵活，前后顺序可以颠倒，而且break语句还可以省略。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><ol>\n<li>初始化语句</li>\n<li>条件判断</li>\n<li>循环体</li>\n<li>步进语句</li>\n</ol>\n<ul>\n<li>while(布尔表达式) {循环体; 步进表达式; }</li>\n<li>do{ 循环体;步进语句; } while (布尔表达式);</li>\n<li>for ( 初始化表达式 ; 布尔表达式 ; 步进表达式) { 循环体 }</li>\n<li>break <ul>\n<li>可以在switch语句当中，一旦执行，整个switch语句立刻结束。</li>\n<li>还可以用在循环语句当中，一旦执行，整个循环语句立刻结束。打断循环。</li>\n</ul>\n</li>\n<li>continue<ul>\n<li>一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环</li>\n</ul>\n</li>\n</ul>\n<p>1.如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do…while循环会执行至少一次。</p>\n<p>2.for循环的变量在小括号当中定义，只有循环内部才可以使用。</p>\n<h4 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a>死循环</h4><h4 id=\"嵌套循环\"><a href=\"#嵌套循环\" class=\"headerlink\" title=\"嵌套循环\"></a>嵌套循环</h4><p>IDEA项目结构</p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/idea_20211129210035.png\" alt=\"image-20211129210033609\"> </p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数据的概念：是一种容器，可以同时存放多个数据值。</p>\n<p>数组的特点：</p>\n<p>1.数组是一种引用数据类型</p>\n<p>2.数组当中的多个数据，类型必须统一。</p>\n<p>3.数组的长度在程序运行期间不可改变</p>\n<p>数组的初始化，在内存当中创建一个数组，并且向其中赋予一些默认值。</p>\n<p>两种常见的初始化：</p>\n<p>1.动态初始化 ( 指定长度 )</p>\n<ul>\n<li>数据类型 [ ]  数组名称 = new 数据类型 [ 数组长度 ] </li>\n</ul>\n<p>2.静态初始化 ( 指定内容 )</p>\n<ul>\n<li>将具体的数据类型进行指定</li>\n<li>数据类型 [ ] 数组名称 = new 数据类型 [ ] {元素1, 元素2 , …… }</li>\n<li>数据类型 [ ] 数组名称 = {元素1……}</li>\n</ul>\n<h4 id=\"数组元素获取和访问\"><a href=\"#数组元素获取和访问\" class=\"headerlink\" title=\"数组元素获取和访问\"></a>数组元素获取和访问</h4><ul>\n<li>直接打印数组名称，得到的是数组对应的 内存地址哈希值</li>\n<li>索引值从0开始 , 一直到“ 数组的长度-1 ” 为止</li>\n<li>使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。<ul>\n<li>如果是整数类型，那么默认是0</li>\n<li>如果是浮点类型，那么默认是0.0</li>\n<li>如果是字符类型，那么默认是 ‘\\u0000’</li>\n<li>如果是布尔类型，默认是false</li>\n<li>如果是引用类型，那么默认为null</li>\n</ul>\n</li>\n<li>静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。</li>\n</ul>\n<h4 id=\"数组元素赋值\"><a href=\"#数组元素赋值\" class=\"headerlink\" title=\"数组元素赋值\"></a>数组元素赋值</h4><h4 id=\"获取数据的长度\"><a href=\"#获取数据的长度\" class=\"headerlink\" title=\"获取数据的长度\"></a>获取数据的长度</h4><p>数组名称.length </p>\n<p>数组一旦创建，程序运行期间，长度不可改变。</p>\n<h4 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h4><p>排序</p>\n<h4 id=\"数组元素反转\"><a href=\"#数组元素反转\" class=\"headerlink\" title=\"数组元素反转\"></a>数组元素反转</h4><p>Reverse</p>\n<p>数组元素反转，其实就是对称位置的元素互换 min==max min++ max–</p>\n<h4 id=\"数组可以作为方法的参数：\"><a href=\"#数组可以作为方法的参数：\" class=\"headerlink\" title=\"数组可以作为方法的参数：\"></a>数组可以作为方法的参数：</h4><ul>\n<li>当调用方法的时候，向方法的小括号进行传参，传递进去的其实是数组的地址值。</li>\n</ul>\n<h4 id=\"数组作为返回值\"><a href=\"#数组作为返回值\" class=\"headerlink\" title=\"数组作为返回值\"></a>数组作为返回值</h4><ul>\n<li>返回的其实也是数组的地址值。</li>\n</ul>\n<h3 id=\"Java中的内存划分\"><a href=\"#Java中的内存划分\" class=\"headerlink\" title=\"Java中的内存划分\"></a>Java中的内存划分</h3><p>5个部分</p>\n<ul>\n<li>栈 stack<ul>\n<li>存放的都是方法中的局部变量<ul>\n<li>局部变量：方法的参数，或者是方法{} 内部的变量</li>\n<li>作用域</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>堆 heap<ul>\n<li>凡事new出来的东西，都在堆当中</li>\n<li>堆内存里面的数据，都有默认值</li>\n</ul>\n</li>\n<li>方法区 method area<ul>\n<li>存储.class相关信息，包含方法的信息</li>\n</ul>\n</li>\n<li>本地方法栈 native<ul>\n<li>与操作系统相关</li>\n</ul>\n</li>\n<li>寄存器 pc register<ul>\n<li>与CPU相关</li>\n</ul>\n</li>\n</ul>\n<p>例：.class main方法进方法区—-main运行—-进栈 开辟空间 —- 数组名称=局部变量 —- new 堆当中 开辟内存空间 —- 0x666地址值 —-地址值赋值给栈当中的局部变量 —- </p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/javase_20211202194830.png\" alt=\"image-20211202194827868\"></p>\n<p>全局变量存放在 方法区</p>\n<ul>\n<li><p>与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息(包括类的名称、方法信息、字段信息)、静态变量、常量 以及编译器编译后的代码等。</p>\n<p>在class文件中除了类的字段、方法、接口等描述信息外，还有一项信息是常量池，用来存储编译期间生成的字面量和符号引用。</p>\n<p>在方法区中有一个非常重要的部分就是运行时常量池，他是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，对应的运行时常量池就被创建出来。当然并非class文件常量池中的内容才能进入运行时常量池，在运行期间也可将新的常量放入运行时常量池中，比如string的intern方法。</p>\n</li>\n<li><p>通过javac命令将Java文件编译为class文件。然后通过 javap -verbose xxx.class来解析class文件。</p>\n</li>\n<li><p>WinHex</p>\n</li>\n<li><p>总结：Java中的全局变量，也就是class的字段，存放在方法区中。</p>\n</li>\n</ul>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><ul>\n<li>数组索引越界异常 ArrayIndexOutOfBoundsException</li>\n<li>空指针异常 NullPointerException</li>\n</ul>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><ul>\n<li>面向过程<ul>\n<li>强调步骤</li>\n</ul>\n</li>\n<li>面向对象：当需要实现一个功能的时候，不关心具体的步骤，而是找一个已经具有该功能…<ul>\n<li>强调对象</li>\n<li>三大基本特征<ul>\n<li>封装 继承 多态</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h3><ul>\n<li>类<ul>\n<li>是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物</li>\n</ul>\n</li>\n<li>属性：就是该事物的状态信息</li>\n<li>行为：就是该事物能做什么</li>\n<li>类与对象的关系<ul>\n<li>类是对一类事物的描述，是抽象的。</li>\n<li>对象是一类事物的实例，是具体的。</li>\n<li>类是对象的模板，对象是类的实体。</li>\n</ul>\n</li>\n<li>类的定义<ul>\n<li>成员变量：对应事物的属性<ul>\n<li>全局变量又叫成员变量，它是声明在类中、函数、静态语句块外的变量。全局变量又分为类变量(静态变量)、实例变量。</li>\n<li>如果成员变量没有进行赋值，那将会有一个默认值，规则和数组一样。</li>\n</ul>\n</li>\n<li>成员方法：对应事物的行为</li>\n</ul>\n</li>\n<li>对象的创建和使用<ul>\n<li>类名称 对象名 = new 类名称 ( ) ;</li>\n<li>使用：对象名.成员变量名   对象名.成员方法名</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"对象的内存图\"><a href=\"#对象的内存图\" class=\"headerlink\" title=\"对象的内存图\"></a>对象的内存图</h4><p>main方法运行进入栈空间 —– 创建了一个对象 进堆</p>\n<p>！！！运行进栈 —- 方法完了 出栈</p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/javase_20211203190806.png\" alt=\"image-20211203190805393\"></p>\n<h4 id=\"使用对象类型作为方法参数\"><a href=\"#使用对象类型作为方法参数\" class=\"headerlink\" title=\"使用对象类型作为方法参数\"></a>使用对象类型作为方法参数</h4><p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/javase_20211203193154.png\" alt=\"image-20211203193152992\"></p>\n<h4 id=\"使用对象类型作为方法返回值\"><a href=\"#使用对象类型作为方法返回值\" class=\"headerlink\" title=\"使用对象类型作为方法返回值\"></a>使用对象类型作为方法返回值</h4><p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/20211203193507.png\" alt=\"image-20211203193505934\"></p>\n<h4 id=\"局部变量和成员变量\"><a href=\"#局部变量和成员变量\" class=\"headerlink\" title=\"局部变量和成员变量\"></a>局部变量和成员变量</h4><ul>\n<li>定义的位置不一样<ul>\n<li>局部变量：在方法的内部</li>\n<li>成员变量：在方法的外部，直接写在类当中</li>\n</ul>\n</li>\n<li>作用范围不一样<ul>\n<li>局部变量：只有方法当中才可以使用，出了方法就不能再用</li>\n<li>成员变量：整个类全都可以使用。</li>\n</ul>\n</li>\n<li>默认值不一样<ul>\n<li>局部变量：没有默认值，如果要使用，必须手动进行复制</li>\n<li>成员变量：如果没有赋值，会有默认值，规则和数组一样。(参数在方法调用的时候必须会赋值)</li>\n</ul>\n</li>\n<li>内存的位置不一样<ul>\n<li>局部变量：栈内存</li>\n<li>成员变量：堆内存</li>\n</ul>\n</li>\n<li>生命周期不一样<ul>\n<li>局部变量：随着方法进栈而诞生，随着方法出栈而消失</li>\n<li>成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失。</li>\n</ul>\n</li>\n</ul>\n<p>局部变量是存在于栈里，随着方法的调用而产生，随着方法的执行完毕而消失。因为栈是线程私有的，所以局部变量也是线程安全的。</p>\n<p>成员变量：堆和方法区都存在。</p>\n<p>方法区存有类信息、常量、静态变量，编译后的class文件等，既然是类信息，那么一个class类中的方法名，类名，成员变量名称等都属于该类的信息，也是存在于方法区中，也就是一个类中的成员变量名称是存在于方法区中的。但是在我们new一个对象后，这个对象上包含成员变量的值是放在堆中的，也就是new的这个对象包含着这个对象的成员变量的信息(也就是值)，但是这个对象上不会包含该类的方法，因为方法是共享的。</p>\n<p>1、JVM只有一个堆区被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身。</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><ul>\n<li>方法就是一种封装</li>\n<li>关键字private也是一种封装<ul>\n<li>超出本类范围之外就不能直接访问。通过Getter/Setter方法访问</li>\n<li>对于基本类型当中的boolean值，Getter方法一定要写成isXxx的形式，而setXxx规则不变</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ul>\n<li>当方法的局部变量和类的成员变量重名，根据就近原则，优先使用局部变量。</li>\n<li>如果需要访问本类当中的成员变量，需要使用：<ul>\n<li>this.成员变量名</li>\n</ul>\n</li>\n</ul>\n<p>⚠️：通过谁调用的方法，谁就是this</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><p>专门用来创建对象的方法。通过关键字new来创建对象时，其实就是在调用构造方法。</p>\n<p>public 类名称 ( 参数类型 参数名称 ) { 方法体 }</p>\n<ul>\n<li>构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样</li>\n<li>构造方法不要写返回值类型，连void都不写。</li>\n<li>构造方法不能return一个具体的返回值</li>\n<li>如果没有编写任何构造方法，那么编译器默认一个空参构造方法。</li>\n<li>一旦编写了构造方法，那么编译器将没有默认的构造方法。</li>\n<li>构造方法是可以重载的。方法名相同，参数列表不同</li>\n</ul>\n<h3 id=\"Java-bean\"><a href=\"#Java-bean\" class=\"headerlink\" title=\"Java bean\"></a>Java bean</h3><p>一个标准的类</p>\n<p>1、所有的成员变量都要有private关键字修饰</p>\n<p>2、为每一个成员变量编写一对Getter/Setter方法</p>\n<p>3、一个无参的构造方法</p>\n<p>4、一个全参的构造方法</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>application program interface 应用程序编程接口</p>\n<h4 id=\"Scanner\"><a href=\"#Scanner\" class=\"headerlink\" title=\"Scanner\"></a>Scanner</h4><p>键盘输入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Scanner 类的功能，可以实现键盘输入数据到程序中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有java.lang包下的内容不需要导包，其他的包都需要import语句</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01Scanner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建 System.in 从键盘输入</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键盘输入的int数(按enter回车结束)&quot;</span>);</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = sc.nextInt();  <span class=\"comment\">// 输入非法int数字：InputMismatchException</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;获取键盘输入的int数字: &quot;</span>+i);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键盘输入的String数(按enter回车结束)&quot;</span>);</span><br><span class=\"line\">        Scanner sc1 = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String str = sc.next();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;获取键盘输入的int数字: &quot;</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Random\"><a href=\"#Random\" class=\"headerlink\" title=\"Random\"></a>Random</h4><p>随机数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Random类用来生成随机数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01Random</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getRandom(<span class=\"number\">10</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个默认随机数字</span></span><br><span class=\"line\"><span class=\"comment\">//        Random random = new Random();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;nextInt()随机int数字: &quot;+ random.nextInt()); // 56426158</span></span><br><span class=\"line\">        <span class=\"comment\">// 0~9</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;nextInt(左闭右开区间)随机[0,10)int数字: &quot; + random.nextInt(10));</span></span><br><span class=\"line\">        <span class=\"comment\">// 1～10</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;1~10之间的数字：&quot;+(random.nextInt(10)+1));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1~n [1,n]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandom</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Random().nextInt(n)+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01RandomGame</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 随机数</span></span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> randomNum = r.nextInt(<span class=\"number\">100</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 键盘输入猜测的数字</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;请从键盘输入一个[1,100]之间的数字：&quot;</span>);</span><br><span class=\"line\">            Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> guessNum = sc.nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (guessNum &gt; randomNum) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜的数字太大了&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (guessNum &lt; randomNum) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜的数字太小了&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜对了&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// 跳出循环</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;游戏结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java.lang.String</span></span><br><span class=\"line\"><span class=\"comment\"> * Java程序中所有字符串字面值都作为此类的实例实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 字符串：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、字符串的内容永不可变</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、正是因为字符串不可改变，所以字符串是可以共享使用的</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、字符串效果上相当于是char[]字符数组，但是底层原理是byte[]字节数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//==========字符串创建============</span></span><br><span class=\"line\"><span class=\"comment\">// 1、空参构造方法 == 空白字符串</span></span><br><span class=\"line\">String str1 = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;&quot;</span>+str1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、根据字符数组创建字符串</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] charArray = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(charArray);</span><br><span class=\"line\">System.out.println(str2);  <span class=\"comment\">// abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、根据字节数组创建字符串</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] byteArray = &#123;<span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>&#125;;</span><br><span class=\"line\">String str3 = <span class=\"keyword\">new</span> String(byteArray);</span><br><span class=\"line\">System.out.println(str3);  <span class=\"comment\">// abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、直接创建 直接写上双引号 就是字符串对象</span></span><br><span class=\"line\">String str4 = <span class=\"string\">&quot;直接创建&quot;</span>;</span><br><span class=\"line\">System.out.println(str4);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ===========</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 字符串常量池：程序当中直接写上的双引号字符串，就在 [字符串常量池] 中。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于基本类型来说，==是进行 [数值] 的比较</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于引用类型来说，==是进行 [地址值] 的比较</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 双引号直接写的字符串在常量池当中，new的不在池当中。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ==是进行对象的地址值比较，如果需要字符串的内容比较，可以使用两个方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * public boolean equals(Object anObject) : 参数可以是任何对象，只有参数是一个字符串并且内容相同的才会给true,否则false</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、任何对象都能用Object 接收。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、equal方法具有对称性</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、如果比较对象一个常量一个变量，推荐把常量字符串写在前面</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * public boolean equalsIgnoreCase(String anotherString) : 忽略大小写</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo02String</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str1 = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        String str2 = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] charArray = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\">        String str3 = <span class=\"keyword\">new</span> String(charArray);</span><br><span class=\"line\">        System.out.println(str1 == str2); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(str1 == str3); <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(str2 == str3); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(str1.equals(str3)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;abc&quot;</span>.equals(str1)); <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ABC&quot;</span>.equalsIgnoreCase(str1)); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// public int length() 获取字符串长度</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;abc&quot;</span>.length()); <span class=\"comment\">// 3</span></span><br><span class=\"line\">        <span class=\"comment\">// public String concat(String str) 将当前字符串和参数字符串拼接成为返回值新的字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.concat(<span class=\"string\">&quot;world&quot;</span>));<span class=\"comment\">// helloworld 新的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// public char charAt(int index) 获取指定索引为止的单个字符</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.charAt(<span class=\"number\">1</span>)); <span class=\"comment\">// e</span></span><br><span class=\"line\">        <span class=\"comment\">// public int indexOf(String str) 查找参数字符串在本来字符串当中出现的第一次索引位置</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;H&quot;</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 截取 [beginIndex,endIndex)</span></span><br><span class=\"line\">        <span class=\"comment\">// public String substring(int beginIndex, int endIndex)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.substring(<span class=\"number\">2</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// l</span></span><br><span class=\"line\">        <span class=\"comment\">// public String substring(int beginIndex)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>.substring(<span class=\"number\">2</span>)); <span class=\"comment\">// llo</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        下面这种写法，字符串的内容仍然是没有改变的</span></span><br><span class=\"line\"><span class=\"comment\">        下面有两个字符串 &quot;hello&quot;  &quot;Java&quot;</span></span><br><span class=\"line\"><span class=\"comment\">        strA当中保存的是地址值</span></span><br><span class=\"line\"><span class=\"comment\">        本来地址值是hello的 哈希地址值</span></span><br><span class=\"line\"><span class=\"comment\">        后来地址值变成了 Java的哈希地址值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String strA = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">        System.out.println(strA);</span><br><span class=\"line\">        strA = <span class=\"string\">&quot;Java&quot;</span>;</span><br><span class=\"line\">        System.out.println(strA);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        public char[] toCharArray() 将当前字符串拆分成字符数组作为返回值</span></span><br><span class=\"line\"><span class=\"comment\">        public byte[] getBytes() 获取当前字符串底层的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">        public String replace(CharSequence target, CharSequence replacement)</span></span><br><span class=\"line\"><span class=\"comment\">        将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串</span></span><br><span class=\"line\"><span class=\"comment\">        备注：CharSequence 意思是说可以接收字符串类型</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = <span class=\"string\">&quot;hello&quot;</span>.toCharArray();</span><br><span class=\"line\">        System.out.println(Arrays.toString(chars)); <span class=\"comment\">// [h, e, l, l, o]</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = <span class=\"string\">&quot;hello&quot;</span>.getBytes();</span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes)); <span class=\"comment\">// [104, 101, 108, 108, 111]</span></span><br><span class=\"line\">        String newStr = <span class=\"string\">&quot;hello&quot;</span>.replace(<span class=\"string\">&quot;llo&quot;</span>, <span class=\"string\">&quot;***&quot;</span>);</span><br><span class=\"line\">        System.out.println(newStr); <span class=\"comment\">// he***</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        分割字符串</span></span><br><span class=\"line\"><span class=\"comment\">        public String[] split(String regex) 按照参数的规则,将字符串切分成若干部分</span></span><br><span class=\"line\"><span class=\"comment\">        split方法的参数其实是一个正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String split = <span class=\"string\">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class=\"line\">        String[] splitArray = split.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(splitArray)); <span class=\"comment\">// [aaa, bbb, ccc]</span></span><br><span class=\"line\">        System.out.println(Arrays.toString((<span class=\"string\">&quot;xxx.yyy.zzz&quot;</span>).split(<span class=\"string\">&quot;\\\\.&quot;</span>))); <span class=\"comment\">// [xxx, yyy, zzz]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建对象的标准格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * 类名称 对象名 = new 类名称();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 匿名对象：</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有右边的对象，没有左边的名字和赋值运算符。</span></span><br><span class=\"line\"><span class=\"comment\"> * new 类名称()</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：匿名对象只能使用唯一的一次，下次再用不得不再创建一个新对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果确定有一个对象只需要使用唯一的一次，就可以用匿名对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 匿名对象作为方法的参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 匿名对象作为返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对象数组\"><a href=\"#对象数组\" class=\"headerlink\" title=\"对象数组\"></a>对象数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个长度为3的数组，里面用来存放Person类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点 一旦创建 程序运行期间长度不可以发生改变</span></span><br><span class=\"line\">Person[] arrays = <span class=\"keyword\">new</span> Person[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组的长度不可以发生改变</span></span><br><span class=\"line\"><span class=\"comment\"> * ArrayList 集合的长度是可以任意变化的</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于 ArrayList 有一个尖括号&lt;E&gt; 代表泛型</span></span><br><span class=\"line\"><span class=\"comment\"> * 泛型只能是引用类型，不能是基本类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用基本类型对应的包装类</span></span><br><span class=\"line\"><span class=\"comment\"> * jdk5+ 支持自动装箱、自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ArrayList集合，直接打印得到的不是地址值，而是内容(toString重写)</span></span><br><span class=\"line\"><span class=\"comment\"> * public boolean add(E e)</span></span><br><span class=\"line\"><span class=\"comment\"> * public E get(int index)</span></span><br><span class=\"line\"><span class=\"comment\"> * public E remove(int index)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01ArrayList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建ArrayList 集合，集合名称为list 装的全都是String字符串类型的数据</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 集合中添加元素</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> wu = list.add(<span class=\"string\">&quot;wu&quot;</span>);</span><br><span class=\"line\">        System.out.println(wu);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;zi&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;mei mei&quot;</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        <span class=\"comment\">// 从集合中获取元素</span></span><br><span class=\"line\">        String str2 = list.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(str2); <span class=\"comment\">// zi</span></span><br><span class=\"line\">        <span class=\"comment\">// 从集合中删除元素</span></span><br><span class=\"line\">        String remove = list.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;被删除的是: &quot;</span>+remove);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;集合的长度: &quot;</span>+list.size()); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 泛型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"静态static关键字\"><a href=\"#静态static关键字\" class=\"headerlink\" title=\"静态static关键字\"></a>静态static关键字</h3><p>一旦用了static关键字，那么这样的内容不再属于自己，而是属于类的，所以凡事本类的对象的，都共享同一份。</p>\n<h4 id=\"static关键字修饰成员\"><a href=\"#static关键字修饰成员\" class=\"headerlink\" title=\"static关键字修饰成员\"></a>static关键字修饰成员</h4><h5 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h5><ul>\n<li>如果一个成员变量使用static关键字，那么这个变量不再属于对象自己，而是属于所在的类，多个对象共享同一份数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03StaticField</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;x1&quot;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;x2&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Person.room = &quot;101教室&quot;;</span></span><br><span class=\"line\">        p1.room = <span class=\"string\">&quot;101教室&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//  p1--姓名:x1;年龄:20;教室:101教室;id=1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;p1--姓名:&quot;</span>+p1.getName()+<span class=\"string\">&quot;;年龄:&quot;</span>+p1.getAge()+<span class=\"string\">&quot;;教室:&quot;</span>+p1.room+<span class=\"string\">&quot;;id=&quot;</span>+p1.getId());</span><br><span class=\"line\">        <span class=\"comment\">//  p2--姓名:x2;年龄:21;教室:101教室;id=2</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;p2--姓名:&quot;</span>+p2.getName()+<span class=\"string\">&quot;;年龄:&quot;</span>+p2.getAge()+<span class=\"string\">&quot;;教室:&quot;</span>+p2.room+<span class=\"string\">&quot;;id=&quot;</span>+p2.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h5><ul>\n<li>static修饰的成员方法，那么这个方法就是静态方法。静态方法不属于对象的，而是属于类的。<ul>\n<li>对于静态方法来说，可以通过对象名进行调用[编译之后也会被javac翻译成”类名称.静态方法名”]，也可以直接通过类名称来调用。</li>\n</ul>\n</li>\n<li>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</li>\n</ul>\n<p>无论是成员变量还是成员方法，如果有了static，都推荐使用类名称进行调用。</p>\n<p>静态变量：类名称.静态变量;</p>\n<p>静态方法：类名称.静态方法();</p>\n<p>⚠️：</p>\n<p>1、静态不能直接访问非静态。</p>\n<p>原因：因为在内存当中是【先】有的静态内容，【后】有的非静态内容</p>\n<p>2、静态方法中不能使用this。</p>\n<p>原因：this代表当前对象。通过谁调用的方法，谁就是当前对象。</p>\n<h5 id=\"内存图\"><a href=\"#内存图\" class=\"headerlink\" title=\"内存图\"></a>内存图</h5><p>根据类名称方法静态成员变量的时候，全程和对象就没有关系，只和类有关系。</p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/static_20210621151752.jpeg\" alt=\"4A5B67EE-4C4C-4C62-B500-D933AFEBF99B\"></p>\n<h5 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">静态代码块的格式是：</span></span><br><span class=\"line\"><span class=\"comment\">public class 类名称&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    static &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     // 静态代码块的内容</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">特点：当第一次用到本类时，静态代码块执行[唯一的一次]。</span></span><br><span class=\"line\"><span class=\"comment\">静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</span></span><br><span class=\"line\"><span class=\"comment\">用途：</span></span><br><span class=\"line\"><span class=\"comment\">用来一次性地对静态成员变量进行赋值。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonStatic</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonStatic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参构造方法执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">java.util.Arrays 数组相关的工具类，提供大量的静态方法，用来实现数组常见的操作</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">sort排序：按照默认升序(从小到大)对数组的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">备注：</span></span><br><span class=\"line\"><span class=\"comment\">1、如果是数值，sort默认按照升序从小到大</span></span><br><span class=\"line\"><span class=\"comment\">2、如果是字符串，sort默认按照字母升序</span></span><br><span class=\"line\"><span class=\"comment\">3、如果是自定义的类型，那么这个自定义的类需要有Comparable活着Comparable接口的支持。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03Arrays</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] intArrays = &#123;<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(intArrays)); <span class=\"comment\">// [9, 4, 10, 12]</span></span><br><span class=\"line\">        Arrays.sort(intArrays);</span><br><span class=\"line\">        System.out.println(Arrays.toString(intArrays)); <span class=\"comment\">// [4, 9, 10, 12]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.day01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03Math</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 绝对值</span></span><br><span class=\"line\">        System.out.println(Math.abs(<span class=\"number\">3.14</span>)); <span class=\"comment\">// 3.14</span></span><br><span class=\"line\">        System.out.println(Math.abs(-<span class=\"number\">1</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\">        <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">3.14</span>)); <span class=\"comment\">// 4.0</span></span><br><span class=\"line\">        <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\">        System.out.println(Math.floor(<span class=\"number\">3.9</span>)); <span class=\"comment\">// 3.0</span></span><br><span class=\"line\">        <span class=\"comment\">// 四舍五入</span></span><br><span class=\"line\">        System.out.println(Math.round(<span class=\"number\">3.5</span>)); <span class=\"comment\">// 4</span></span><br><span class=\"line\">        System.out.println(Math.PI);</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// -10.8~5.9 之间 绝对值大于6 或者2.1的整数有多少个</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>) -<span class=\"number\">10.8</span>; i&lt;=<span class=\"number\">5.9</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.abs(i)&gt;<span class=\"number\">6</span> || Math.abs(i)&lt;<span class=\"number\">2.1</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(count); <span class=\"comment\">// 9</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// -10.8~5.9 之间 绝对值大于6 或者2.1的整数有多少个 --- double版本</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">double</span> i = Math.ceil(-<span class=\"number\">10.8</span>); i&lt;=<span class=\"number\">5.9</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.abs(i)&gt;<span class=\"number\">6</span> || Math.abs(i)&lt;<span class=\"number\">2.1</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(count); <span class=\"comment\">// 9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>继承是多态的前提，如果没有继承，就没有多态。</p>\n<p>继承主要解决的问题是：共性抽取。</p>\n<p>父类：也可以叫基类、超类</p>\n<p>子类：也可以叫派生类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承中成员变量的访问特点\"><a href=\"#继承中成员变量的访问特点\" class=\"headerlink\" title=\"继承中成员变量的访问特点\"></a>继承中成员变量的访问特点</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">1、直接通过子类对象访问成员变量：</span></span><br><span class=\"line\"><span class=\"comment\">   等号左边是谁，就优先用谁，没有则向上找。</span></span><br><span class=\"line\"><span class=\"comment\">2、间接通过成员方法访问访问成员变量。</span></span><br><span class=\"line\"><span class=\"comment\">   该方法属于谁，就优先用谁。没有则向上找。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子类方法中重名\"><a href=\"#子类方法中重名\" class=\"headerlink\" title=\"子类方法中重名\"></a>子类方法中重名</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">局部变量：          直接写</span></span><br><span class=\"line\"><span class=\"comment\">本类的成员变量：     this.成员变量</span></span><br><span class=\"line\"><span class=\"comment\">父类的成员变量：     super.成员变量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"成员方法-1\"><a href=\"#成员方法-1\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">在父子类的继承关系中，创建子类对象，访问成员方法的规则：</span></span><br><span class=\"line\"><span class=\"comment\">\t创建的对象是谁new，就优先用谁，如果没有就想上找。</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\t无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类。\t</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">重写 override  == 覆盖、覆写</span></span><br><span class=\"line\"><span class=\"comment\">概念：在继承关系中，方法的名称一样，参数列表也一样。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">重写override</span></span><br><span class=\"line\"><span class=\"comment\">重载 overload：方法的名称一样，参数列表【不一样】</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">方法的覆盖重写特点：创建的是子类对象，则优先用子类方法。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">方法的覆盖重写的注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">1、必须保证父子类之间方法的名称相同，参数列表也相同。</span></span><br><span class=\"line\"><span class=\"comment\">@Override：写在方法前面，用来判断方法是否是有效的覆盖重写</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">2、子类方法的返回值必须小于等于父类方法的返回值范围</span></span><br><span class=\"line\"><span class=\"comment\">java.lang.Object类是所有类的公共最高父类。</span></span><br><span class=\"line\"><span class=\"comment\">java.lang.String是Object子类</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">3、子类方法的权限必须大于等于父类方法的权限修饰符。</span></span><br><span class=\"line\"><span class=\"comment\">public &gt; protected &gt; (default) &gt; private </span></span><br><span class=\"line\"><span class=\"comment\">备注：(default)不是关键字default，而是什么都不写，留空</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>设计原则：</p>\n<p>对于已经投入使用的类，尽量不要进行修改。推荐定一个新的类，来重复利用其中共性内容，并且添加改动新内容。</p>\n<h4 id=\"继承中构造方法\"><a href=\"#继承中构造方法\" class=\"headerlink\" title=\"继承中构造方法\"></a>继承中构造方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">继承关系中，父子类构造方法的访问特点：</span></span><br><span class=\"line\"><span class=\"comment\">1、子类构造方法当中，有一个默认隐含的super() 调用。所以一定是先调用的父类构造，后执行的子类构造</span></span><br><span class=\"line\"><span class=\"comment\">2、可以通过super关键字来子类构造调用父类重载构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">3、super的父类构造调用，必须是子类构造方法的第一个语句。 不能一个子类构造调用多次super构造。</span></span><br><span class=\"line\"><span class=\"comment\">只有子类构造方法才能调用父类构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">总结</span></span><br><span class=\"line\"><span class=\"comment\">子类必须调用父类构造方法，不写赠送super()，写了则用写定的super调用。super只能有一个还必须是第一个。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">super关键字的用法有三种</span></span><br><span class=\"line\"><span class=\"comment\">1、在子类的成员方法中，访问父类的成员变量。</span></span><br><span class=\"line\"><span class=\"comment\">2、在子类的成员方法中，访问父类的成员方法。</span></span><br><span class=\"line\"><span class=\"comment\">3、在子类的构造方法中，访问父类的构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"this-1\"><a href=\"#this-1\" class=\"headerlink\" title=\"this\"></a>this</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">super关键字用来访问父类内容，this关键字用来方法本类内容，用法有三种：</span></span><br><span class=\"line\"><span class=\"comment\">1、在本类的成员方法中，访问本类的成员变量。</span></span><br><span class=\"line\"><span class=\"comment\">2、在本来的成员方法中，访问本类的另一个成员方法。</span></span><br><span class=\"line\"><span class=\"comment\">3、在本类的构造方法中，访问本类的另一个构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">在第三种方法中要注意：</span></span><br><span class=\"line\"><span class=\"comment\">this()调用也必须是构造方法的第一个语句，唯一一个。</span></span><br><span class=\"line\"><span class=\"comment\">super和this两种构造调用，不能同时使用。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(num);       <span class=\"comment\">// 20</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.num);  <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">super</span>.num); <span class=\"comment\">//30 父类</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>this和super图解</p>\n<p>1、程序运行 —– 进入方法区</p>\n<p>2、main方法进栈—–创建子类对象 Zi zi </p>\n<p>3、堆当中new Zi —– 子类内容 [父类内容]</p>\n<p>4、子类调用方法 —– 方法进栈</p>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/extends_20210623163209.jpeg\" alt=\"5D20587D-D0BF-4E6A-8FA9-2637D5F43D07\"></p>\n<p>Java语言是单继承的。</p>\n<p>一个类的直接父类只能有唯一一个。</p>\n<p>Java语言可以多级继承。</p>\n<p>一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类。</p>\n<h3 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h3><h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"web前端\"><a href=\"#web前端\" class=\"headerlink\" title=\"web前端\"></a>web前端</h2><h2 id=\"web后端\"><a href=\"#web后端\" class=\"headerlink\" title=\"web后端\"></a>web后端</h2><h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h2 id=\"运维\"><a href=\"#运维\" class=\"headerlink\" title=\"运维\"></a>运维</h2><h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h1 id=\"File类和IO流程\"><a href=\"#File类和IO流程\" class=\"headerlink\" title=\"File类和IO流程\"></a>File类和IO流程</h1><h1 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h1>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/24/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/",
            "url": "http://example.com/2021/05/24/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/",
            "title": "每日记录",
            "date_published": "2021-05-24T14:33:14.075Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理xml数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">synchronizeManually</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http://10.13.1.93:9710/SunECM/servlet/RouterServlet</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">&quot;/payment/processPolicyPayment.do?ActionType=getImgXml&amp;type=&quot;</span>+type+<span class=\"string\">&quot;&amp;certiNo=&lt;bean:write name=&quot;</span>certiNo<span class=\"string\">&quot;/&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 请求返回数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xmlhttp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;<span class=\"comment\">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// code for IE6, IE5</span></span><br><span class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlhttp.open(<span class=\"string\">&quot;POST&quot;</span>,url, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    xmlhttp.setRequestHeader(<span class=\"string\">&quot;Content-type&quot;</span>,<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">    xmlhttp.send();<span class=\"comment\">//发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xmlhttp.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> responseText = xmlhttp.responseText;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (responseText == <span class=\"string\">&quot;1&quot;</span>)&#123;</span><br><span class=\"line\">            fm.fileName.value = <span class=\"string\">&quot;有附件&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fm.fileName.value = <span class=\"string\">&quot;无附件&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;影像接口调用失败！&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// xmlDoc = xmlhttp.responseXML;//接受返回的文档,返回的形式是XmlDocument，知道返回的形式，想使用什么方法，直接百度了</span></span><br><span class=\"line\">    <span class=\"comment\">//eval(xmlDoc);</span></span><br><span class=\"line\">    <span class=\"comment\">// var nodes = xmlDoc.getElementsByTagName(&quot;downloadUrl&quot;)[0];//根据标签名回去节点列表</span></span><br><span class=\"line\">    <span class=\"comment\">// var url = nodes.childNodes[0];//在这犯错了，一个节点也是个集合，包括一系列的属性</span></span><br><span class=\"line\">    <span class=\"comment\">// var value = url.nodeValue ;</span></span><br><span class=\"line\">    <span class=\"comment\">// location.href= value;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">additionInfo</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    result.push(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;certiID&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">1</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;certiNo&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">2</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;policyNo&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">3</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;appliCode&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">4</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;appliName&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">5</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;planSerialNo&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">6</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;addId&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">7</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;poaType&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">8</span>).val(),</span><br><span class=\"line\">        <span class=\"string\">&quot;certiType&quot;</span> : $(obj).parent().parent().children(<span class=\"string\">&#x27;td&#x27;</span>).children(<span class=\"string\">&#x27;input&#x27;</span>).eq(<span class=\"number\">9</span>).val()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    fm.action=<span class=\"string\">&quot;/payment/processPolicyPayment.do?ActionType=additionInfo&amp;jsonData=&quot;</span>+<span class=\"built_in\">JSON</span>.stringify(result);</span><br><span class=\"line\">    fm.submit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonData = httpServletRequest.getParameter(<span class=\"string\">&quot;jsonData&quot;</span>);</span><br><span class=\"line\">com.alibaba.fastjson.JSONArray objects = JSON.parseArray(jsonData); <span class=\"comment\">//  对象数组</span></span><br><span class=\"line\">String certiID = httpServletRequest.getParameter(<span class=\"string\">&quot;certiID&quot;</span>);</span><br><span class=\"line\">String certiNo = httpServletRequest.getParameter(<span class=\"string\">&quot;certiNo&quot;</span>);</span><br><span class=\"line\">String appliCode = httpServletRequest.getParameter(<span class=\"string\">&quot;appliCode&quot;</span>);</span><br><span class=\"line\">String appliName = httpServletRequest.getParameter(<span class=\"string\">&quot;appliName&quot;</span>);</span><br><span class=\"line\">String planSerialNo = httpServletRequest.getParameter(<span class=\"string\">&quot;planSerialNo&quot;</span>);</span><br><span class=\"line\">String addId = httpServletRequest.getParameter(<span class=\"string\">&quot;addId&quot;</span>);</span><br><span class=\"line\">String poaType = httpServletRequest.getParameter(<span class=\"string\">&quot;poaType&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((objects!=<span class=\"keyword\">null</span>) &amp;&amp; (!objects.isEmpty())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;certiID&quot;</span>)!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        certiID = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;certiID&quot;</span>);</span><br><span class=\"line\">        certiNo = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;certiNo&quot;</span>);</span><br><span class=\"line\">        appliCode = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;appliCode&quot;</span>);</span><br><span class=\"line\">        appliName = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;appliName&quot;</span>);</span><br><span class=\"line\">        planSerialNo = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;planSerialNo&quot;</span>);</span><br><span class=\"line\">        addId = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;addId&quot;</span>);</span><br><span class=\"line\">        poaType = ((com.alibaba.fastjson.JSONObject) objects.get(<span class=\"number\">0</span>)).getString(<span class=\"string\">&quot;poaType&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>是否第三方支付保费<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isPolicyholders&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span>是</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isPolicyholders&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span>否</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>java.lang.ClassCastException: oracle.sql.CLOB cannot be cast to weblogic.jdbc.vendor.oracle.OracleThinClob</p>\n<p>jdbc:oracle:thin:@10.13.1.72:1521:CORETEST</p>\n<p>Z2021032560191126 </p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/24/%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/24/%E9%97%AE%E9%A2%98/",
            "title": "问题记录",
            "date_published": "2021-05-24T14:33:13.983Z",
            "content_html": "<h1 id=\"weblogic\"><a href=\"#weblogic\" class=\"headerlink\" title=\"weblogic\"></a>weblogic</h1><h2 id=\"Java报错\"><a href=\"#Java报错\" class=\"headerlink\" title=\"Java报错\"></a>Java报错</h2><ul>\n<li><p>weblogic：Servlet failed with Exception</p>\n<p>最近在发布的项目发现：weblogic报Internal Server Error-500错误，看到出错信息为Servlet failed with Exception   java.lang.NullPointerException，毫无疑问，导致出现这种问题的原因在于NullPointerException（空指针异常），也就是说【代码中出现了为空】的对象，并不是weblogic部署出现的问题。</p>\n<p>接下来看看日志信息，涉及哪个Action的方法中出现了空指针，这需要你逐句去调试。找到空指针问题也就差不多解决了。</p>\n<p>PS：莫名出现java.net.SocketException: Write failed: Broken pipe也可能是上述原因造成的。当然真正的问题还得具体对待。</p>\n</li>\n</ul>\n<h2 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a>配置数据源</h2><ul>\n<li>ORA-12505, TNS:listener does not currently know of SID given in connect descriptor</li>\n</ul>\n<p>ORA-12505: TNS: 监听程序当前无法识别连接描述符中所给出的SID</p>\n<p>1】给程序配置新的数据库的时候，出现了以下错误 </p>\n<p>ORA-12505, TNS:listener does not currently know of SID given in connect descriptor<br>说明给到的sid有误,很有可能就是服务名和sid混淆使用。</p>\n<p>首先了解数据库url的写法有两种</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">//</span> <span class=\"string\">监听sid服务，表示sid为CORETEST</span></span><br><span class=\"line\"><span class=\"meta\">database.url</span>=<span class=\"string\">jdbc:oracle:thin:@10.13.1.xx:1521:CORETEST</span></span><br><span class=\"line\"><span class=\"meta\">//</span> <span class=\"string\">监听服务名，表示服务名为CORETEST</span></span><br><span class=\"line\"><span class=\"meta\">database.url</span>=<span class=\"string\">jdbc:oracle:thin:@10.13.1.xx:1521/CORETEST</span></span><br><span class=\"line\"><span class=\"meta\">//</span> <span class=\"string\">第一种是监听sid服务，第二种则是监听服务名</span></span><br></pre></td></tr></table></figure>\n\n<p>问题】把服务名当做了sid，导致出现这个错误</p>\n<p>解决】把orcl的 “ : ” 改为 “ / ”  访问正常</p>\n<p>补充】提供的tnsname</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TEST</span> =<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">(DESCRIPTION</span> =<span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"meta\">(ADDRESS_LIST</span> =<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"meta\">(ADDRESS</span> = <span class=\"string\">(PROTOCOL = TCP)(HOST = 10.13.1.xx)(PORT = 1521))</span></span><br><span class=\"line\">    <span class=\"attr\">)</span></span><br><span class=\"line\">    <span class=\"meta\">(CONNECT_DATA</span> =<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"meta\">(SERVICE_NAME</span> = <span class=\"string\">CORETEST)</span></span><br><span class=\"line\">    <span class=\"attr\">)</span></span><br><span class=\"line\">  <span class=\"attr\">)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"weblogic版本导致的问题\"><a href=\"#weblogic版本导致的问题\" class=\"headerlink\" title=\"weblogic版本导致的问题\"></a>weblogic版本导致的问题</h2><ul>\n<li>weblogic 10 及以后版本引用 weblogic.jar</li>\n</ul>\n<p>weblogic10 及以后的版本，不能直接使用server/lib 目录下的 weblogic.jar 了，需要通过执行一个命令生成手动生成 wlfullclient.jar，用来替代老版本中的 weblogic.jar。</p>\n<pre><code>具体命令如下（Windows 系统，我的 weblogic 安装目录为C:\\Oracle\\Middleware\\wlserver_10.3）：\n</code></pre>\n<p>C:<br>cd C:\\Oracle\\Middleware\\wlserver_10.3\\server\\lib<br>java -jar C:\\Oracle\\Middleware\\wlserver_10.3\\server\\lib\\modules\\com.bea.core.jarbuilder_1.7.0.0.jar</p>\n<pre><code>执行完成后，会在控制台看到类似于如下的输出信息\n</code></pre>\n<p>xxx<br>Created new jar file: <strong>D:\\Program\\weblogic-10.3.6\\wlserver\\server\\lib\\wlfullclient.jar</strong></p>\n<p>最后一行是生成的 wlfullclient.jar 就是我们需要引用的 jar 包了</p>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ul>\n<li><p>JavaScript 本地对象和内置对象</p>\n</li>\n<li><p>Browser 对象(DOM)</p>\n<ul>\n<li><table>\n<thead>\n<tr>\n<th><a href=\"https://www.w3school.com.cn/jsref/prop_win_top.asp\">top</a></th>\n<th>返回最顶层的先辈窗口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td><a href=\"https://www.w3school.com.cn/htmldom/prop_win_top.asp\">https://www.w3school.com.cn/htmldom/prop_win_top.asp</a></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>HTML DOM对象</p>\n</li>\n</ul>\n<p>1、FF中不能接受document.forms(“formname”)的使用，ie中可以</p>\n<pre><code>    最好改成document.forms[&quot;formname&quot;]的下标用法\n</code></pre>\n<p>2、FF中不能接受document.all的用法，document.all是在ie中定义的用法</p>\n<pre><code>    最好改成document.getElementById\n</code></pre>\n<p>3、FF中不能直接使用div的id获取div的属性，如divId.style.display等</p>\n<pre><code>    应一致改成document.getElementById(&quot;divId&quot;).style.display\n</code></pre>\n<p>JavaScript的一些用法总结：</p>\n<p>如下的用法需要在JSP中增加属性onclick. 以全选为例，οnclick=”javascript:allselect()”//javascript可以省略</p>\n<p>或者将function allselect()用document.getElementById(“allselectbox”).onclick = function();</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全选：</span><br><span class=\"line\"></span><br><span class=\"line\">fuction <span class=\"function\"><span class=\"title\">allselect</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> state = form.allselectbox.checked;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> length = form.username.length;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(length)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">   form.usernames[i].checked=state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span> form.username.check = state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">全选的另一种写法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allSelect</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;usernames&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> state = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;allselectbox&quot;</span>)[<span class=\"number\">0</span>].checked;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(items.length)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++)&#123;</span><br><span class=\"line\">    items[i].checked = state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   items.checked = state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">单项选择：</span><br><span class=\"line\">fuction <span class=\"function\"><span class=\"title\">selectitem</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> length = form.username.length;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(length)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(form.usernames[i].checked) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> form.usernames.check;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转到其他页面：</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">topage</span>(<span class=\"params\">page</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>]</span><br><span class=\"line\"> form.page.value = page;</span><br><span class=\"line\"> form.submit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">取单选框的值Radio:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getradiovalue</span>(<span class=\"params\">objradio</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(objradio.value)==<span class=\"string\">&quot;undefined&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;objradio.length;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(objradio[i].checked)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> objradio[i].value;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(objradio.checked) result = objradio.value;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(e)&#123;result = <span class=\"string\">&quot;&quot;</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">email验证:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidEmail</span>(<span class=\"params\">inEmail</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> filter = <span class=\"regexp\">/^([a-zA-Z0-9_/./-])+/</span>@(([a-zA-Z0-<span class=\"number\">9</span>/-])+<span class=\"regexp\">/.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> filter.test(inEmail);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">检验手机格式：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateMobile</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(form.mobile.value!=<span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"regexp\">/^1[35]/</span>d&#123;<span class=\"number\">9</span>&#125;$/</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!num.test(form.mobile.value))&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;收货人的手机号格式不正确&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   alert(<span class=\"string\">&quot;正确&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">request.getParameter(<span class=\"string\">&quot;action&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h1><ul>\n<li>控制台输出日志乱码</li>\n</ul>\n<p>问题】更改日志配置文件</p>\n<p>1、tomcat安装包 - conf文件夹 - logging.properties文件 - UTF-8改成GBK</p>\n<p>Ctrl+F 全部替换-重启IDEA运行</p>\n<h2 id=\"web前端框架\"><a href=\"#web前端框架\" class=\"headerlink\" title=\"web前端框架\"></a>web前端框架</h2><ul>\n<li>bootstrap</li>\n</ul>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"分布式-多线程-高并发\"><a href=\"#分布式-多线程-高并发\" class=\"headerlink\" title=\"分布式 多线程 高并发\"></a>分布式 多线程 高并发</h2>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/05/24/%E4%BF%9D%E9%99%A9%E8%A1%8C%E4%B8%9A/",
            "url": "http://example.com/2021/05/24/%E4%BF%9D%E9%99%A9%E8%A1%8C%E4%B8%9A/",
            "title": "保险行业",
            "date_published": "2021-05-24T12:09:15.615Z",
            "content_html": "<h1 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h1><h2 id=\"保险契约\"><a href=\"#保险契约\" class=\"headerlink\" title=\"保险契约\"></a>保险契约</h2><ul>\n<li><p>保险合同，也就是通常说的保单</p>\n<p>保单一般分为续保保单和新契约保单。</p>\n<p>对于新契约保单，首先要核保，契约录入，才能最后承保，给你发送的保单就是购买保险的发票。</p>\n</li>\n</ul>\n<h2 id=\"寿险\"><a href=\"#寿险\" class=\"headerlink\" title=\"寿险\"></a>寿险</h2><ul>\n<li>寿险是在保障期内，被投保人死亡或全残，就可以得到赔付。</li>\n<li>一年期寿险<ul>\n<li>一年期寿险和短期医疗险差不多，都是买一年保一年的类型。</li>\n</ul>\n</li>\n<li>定期寿险<ul>\n<li>保障一段时间，比如20年、30年、保到60岁、70岁等。</li>\n<li>保障期灵活，有利于不同时期做配置</li>\n<li>定期寿险价格便宜，保额可观。</li>\n</ul>\n</li>\n<li>终身寿险<ul>\n<li>保障时间是终身。</li>\n<li>价格比较贵，杠杆也会低。</li>\n<li>终身寿险的作用更多是帮助有钱人做遗产继承、合理节税等。</li>\n</ul>\n</li>\n<li>保额<ul>\n<li>一般参考：保额=未偿还债务+5至10年家庭支出</li>\n</ul>\n</li>\n<li>注意<ul>\n<li>寿险的免责条款</li>\n<li>职业限制少</li>\n<li>保障期最好跟缴纳期一致，等待期越短越好</li>\n<li>健康告知宽松</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/04/26/web%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/2021/04/26/web%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/",
            "title": "web项目基础",
            "date_published": "2021-04-26T14:01:54.820Z",
            "content_html": "<h1 id=\"JavaWeb基础\"><a href=\"#JavaWeb基础\" class=\"headerlink\" title=\"JavaWeb基础\"></a>JavaWeb基础</h1><h2 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h2><h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li><p>可扩展标记语言。</p>\n<p>1、Extensible 标签都是自定义的.</p>\n<p>2、Markup Language 标记语言</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  功能</p>\n<p>存储数据</p>\n<p>​    1、配置文件</p>\n<p>​    2、在网络中传输</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  XML和html的区别</p>\n<p>w3c 万维网联盟。浏览器的恶性竞争导致html没有唯一规范。XML要求严格的语法。XML现主用于配置文件。</p>\n<p>​    1、XML的标签都是自定义的。而html标签都是预定义的。</p>\n<p>​    2、XML的语法严格。html语法松散</p>\n<p>​    3、XML是存储数据的。html是展示数据的</p>\n</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>1、XML文档的后缀名 .xml</p>\n<p>2、XML第一行必须定义文档声明</p>\n<p>3、XML文档中有且仅有一个根标签</p>\n<p>4、属性值必须使用双引号(单双都可)引起来</p>\n<p>5、标签必须正确关闭</p>\n<p>6、XML标签区分大小写</p>\n<h4 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;1&#x27;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>zhangsan<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;2&#x27;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>lisi<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>24<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">gender</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">gender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">users</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h4><p>1、文档声明</p>\n<p>​        格式：&lt; ? xml 属性列表 ?&gt;</p>\n<p>​        属性列表</p>\n<p>​                version ： 版本号 必须的属性！</p>\n<p>​                encoding： 编码方式 告知解析引擎当前文档使用的字符集，默认：ISO-8859-1</p>\n<p>​                standalone： 是否独立 取值 yes==不依赖其他文件  no==依赖其他文件。可以不设置</p>\n<p>2、指定 </p>\n<ul>\n<li>结合css的<ul>\n<li>&lt; ?xml-stylesheet type=”text/css” href=”a.css” ?&gt;</li>\n</ul>\n</li>\n</ul>\n<p>3、标签</p>\n<ul>\n<li>标签名称自定义的–规则<ul>\n<li>名称可以包含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标签符号开始</li>\n<li>名称不能以字母 XML 或者 xml Xml等等 开始</li>\n<li>名称不能包含空格</li>\n</ul>\n</li>\n</ul>\n<p>4、属性</p>\n<p>​    id属性值唯一</p>\n<p>5、文本</p>\n<ul>\n<li>CDATA区：在该区域中的数据会被原样展示<ul>\n<li>格式  &lt;![CDATA [要展示的数据] ]&gt;</li>\n</ul>\n</li>\n</ul>\n<p>6、约束 </p>\n<p>说明文档：规定XML文档的书写规则</p>\n<ul>\n<li><p>约束文档</p>\n</li>\n<li><p>分类</p>\n<ul>\n<li><p>DTD 一种简单的约束技术</p>\n<ul>\n<li><p>引入dtd文档到xml文档中</p>\n<ul>\n<li><p>内部dtd：将约束规则定义到XML文档中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;!DOCTYPE students SYSTEM &quot;student.dtd&quot;&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">students</span> [</span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">students</span> (<span class=\"meta-keyword\">student</span>*) &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">student</span> (<span class=\"meta-keyword\">name</span>,<span class=\"meta-keyword\">age</span>,<span class=\"meta-keyword\">sex</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">name</span> (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">age</span> (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">sex</span> (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta\">&lt;!ATTLIST <span class=\"meta-keyword\">student</span> <span class=\"meta-keyword\">number</span> <span class=\"meta-keyword\">ID</span> <span class=\"meta-keyword\">#REQUIRED</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">        ]&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">students</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">student</span> <span class=\"attr\">number</span>=<span class=\"string\">&quot;s001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>zhangsan<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sex</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">sex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">student</span> <span class=\"attr\">number</span>=<span class=\"string\">&quot;s002&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>22<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sex</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">sex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">students</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>外部dtd：将约束的规则定义在外部的dtd文件中</p>\n<ul>\n<li>本地：&lt; ! DOCTYPE 根标签名 SYSTEM “dtd文件的位置” &gt;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ELEMENT students (student*) &gt;</span><br><span class=\"line\">&lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class=\"line\">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ATTLIST student number ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">students</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;student.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">students</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">student</span> <span class=\"attr\">number</span>=<span class=\"string\">&quot;s001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>zhangsan<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sex</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">sex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">student</span> <span class=\"attr\">number</span>=<span class=\"string\">&quot;s002&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>22<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sex</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">sex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">students</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>网络：&lt; ! DOCTYPE 根标签名 PUBLIC “dtd文件名字” “dtd文件的位置URL” &gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Schema 一种复杂的约束技术</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>操作XML文档，将文档中的数据读取到内存中</p>\n<ul>\n<li><p>操作XML文档</p>\n<ul>\n<li>1、解析 (读取) ：将文档中的数据读取到内存中</li>\n<li>2、写入：将内存中的数据保存到XML文档中。持久化的存储。</li>\n</ul>\n</li>\n<li><p>解析XML的方式</p>\n<ul>\n<li>1、DOM：将标记语言文档一次性加载进内存，在内存中会形成一颗DOM树。<ul>\n<li>优点：操作方便，可以文档进行CRUD的所有操作</li>\n<li>缺点：占内存</li>\n</ul>\n</li>\n<li>2、SAX：逐行读取，基于事件驱动的。<ul>\n<li>优点：不占内存。适用于较小设备 比如手机</li>\n<li>缺点：只能读取，不能增删改。</li>\n</ul>\n</li>\n</ul>\n<p>服务器端一般使用DOM。移动端一般使用SAX</p>\n</li>\n</ul>\n<ul>\n<li>XML常见的解析器<ul>\n<li>1、JAXP：sun公司提供的解析器，支持DOM和SAX两种思想</li>\n<li>2、DOM4J：一款非常优秀的解析器。</li>\n<li>3、Jsoup：一款Java的html解析器，可直接解析某个URL地址、html文本内容。它提供一套非常省力的API，可通过DOM、CSS以及类似于jquery的操作方法来读取和操作数据。</li>\n<li>4、PULL：android操作系统内置的解析器，SAX方式的。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Jsoup</p>\n<ul>\n<li><p>操作步骤</p>\n<ul>\n<li>1、导入jar包</li>\n<li>2、获取document对象</li>\n<li>3、获取对应的标签element对象</li>\n<li>4、获取数据</li>\n</ul>\n</li>\n<li><p>对象使用</p>\n<ul>\n<li>Jsoup：工具类，可以解析html或XML文档，返回document<ul>\n<li>parse：解析html或XML文档。返回document</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析XML文档 加载文档进内存 获取dom树 ---&gt; document</span></span><br><span class=\"line\">Document document = Jsoup.parse(<span class=\"keyword\">new</span> File(path), <span class=\"string\">&quot;utf-8&quot;</span>);<span class=\"comment\">// student.xml</span></span><br><span class=\"line\">String xml = <span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;&lt;students&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;    &lt;student number=\\&quot;s001\\&quot;&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;name&gt;zhangsan&lt;/name&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;age&gt;25&lt;/age&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;sex&gt;male&lt;/sex&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;    &lt;/student&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;    &lt;student number=\\&quot;s002\\&quot;&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;name&gt;11&lt;/name&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;age&gt;22&lt;/age&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;        &lt;sex&gt;female&lt;/sex&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;    &lt;/student&gt;\\n&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;&lt;/students&gt;&quot;</span>;</span><br><span class=\"line\">Document parse = Jsoup.parse(xml); <span class=\"comment\">// xml</span></span><br><span class=\"line\"><span class=\"comment\">// parse(URL url, int timeoutMillis): 通过网络路径获取指定的html或XML的文档对象</span></span><br><span class=\"line\"><span class=\"comment\">// URL url = new URL(&quot;&quot;);// 代表网络中的一个资源路径</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>document：文档对象。代表内存中的dom树<ul>\n<li>获取element对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3 获取元素对象</span></span><br><span class=\"line\"><span class=\"comment\">// 3.1 获取所有的student对象</span></span><br><span class=\"line\">Elements elements = document.getElementsByTag(<span class=\"string\">&quot;student&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// System.out.println(elements);</span></span><br><span class=\"line\"><span class=\"comment\">// 3.2 获取属性名为id的元素对象们</span></span><br><span class=\"line\">Elements id = document.getElementsByAttribute(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;name id=&quot;demo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  zhangsan</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// System.out.println(id);</span></span><br><span class=\"line\"><span class=\"comment\">// 3.2 获取 number属性值为s001的元素对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;student number=&quot;s001&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;name id=&quot;demo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  zhangsan</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;age&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  25</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/age&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;sex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  male</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/sex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/student&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">Elements value = document.getElementsByAttributeValue(<span class=\"string\">&quot;number&quot;</span>, <span class=\"string\">&quot;s001&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// System.out.println(value);</span></span><br><span class=\"line\"><span class=\"comment\">// 3.3 获取id属性值的元素对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;name id=&quot;demo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  zhangsan</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">Element number = document.getElementById(<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// System.out.println(number);</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>elements：元素element对象的集合，可以当成arraylist&lt; element&gt;</li>\n<li>element：元素对象<ul>\n<li>1、获取子元素对象</li>\n<li>2、获取属性值</li>\n<li>3、获取文本内容</li>\n</ul>\n</li>\n<li>Node：节点对象 <ul>\n<li>是document和element的父类</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo01.jsoup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.select.Elements;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jsoup快速入门</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsoupDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1、获取document对象 1)根据XML文档</span></span><br><span class=\"line\">        <span class=\"comment\">//1.1 获取student.xml的path</span></span><br><span class=\"line\">        <span class=\"comment\">// 通过.class获取字节码文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 再通过getClassLoader获取类加载器</span></span><br><span class=\"line\">        <span class=\"comment\">// 通过getResource找到资源文件位置</span></span><br><span class=\"line\">        String path = JsoupDemo1.class.getClassLoader().getResource(<span class=\"string\">&quot;student.xml&quot;</span>).getPath();</span><br><span class=\"line\">        <span class=\"comment\">// 解析XML文档 加载文档进内存 获取dom树 ---&gt; document</span></span><br><span class=\"line\">        Document document = Jsoup.parse(<span class=\"keyword\">new</span> File(path), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取元素对象 element</span></span><br><span class=\"line\">        Elements elements = document.getElementsByTag(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements) &#123;</span><br><span class=\"line\">            String name = element.text();</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>快捷查询方式</p>\n<ul>\n<li>1、selector<ul>\n<li>选择器</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询name标签 == 元素选择器</span></span><br><span class=\"line\">Elements elements1 = document.select(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// System.out.println(elements1);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询id值为 demo的元素</span></span><br><span class=\"line\">Elements select = document.select(<span class=\"string\">&quot;#demo&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// System.out.println(select);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取student的标签并且number属性值为s001 的age子标签</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;age&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         25</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/age&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">Elements select1 = document.select(<span class=\"string\">&quot;student[number=&#x27;s001&#x27;] &gt; age&quot;</span>);</span><br><span class=\"line\">System.out.println(select1);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>2、XPath<ul>\n<li> xpath 即为XML路径语言，它是一种用来确定XML文档中某部分位置的语言</li>\n<li>使用jsoup的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据document对象 创建 JXDocument 对象</span></span><br><span class=\"line\">JXDocument jxDocument = <span class=\"keyword\">new</span> JXDocument(document);</span><br><span class=\"line\"><span class=\"comment\">// 集合xpath的语法查询</span></span><br><span class=\"line\"><span class=\"comment\">// 选取所有的student标签</span></span><br><span class=\"line\">List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class=\"string\">&quot;//student&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// System.out.println(jxNode);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询所有student标签下的name标签</span></span><br><span class=\"line\">List&lt;JXNode&gt; jxNodes1 = jxDocument.selN(<span class=\"string\">&quot;//student/name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (JXNode jxNode1 : jxNodes1) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// System.out.println(jxNode1);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询student标签下带有id属性的name标签</span></span><br><span class=\"line\">List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class=\"string\">&quot;//student/name[@id]&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (JXNode jxNode3 : jxNodes3) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// System.out.println(jxNode3);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询student标签下带有id属性的name标签 并且id属性值为demo</span></span><br><span class=\"line\">List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class=\"string\">&quot;//student/name[@id=&#x27;demo&#x27;]&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (JXNode jxNode4 : jxNodes4) &#123;</span><br><span class=\"line\">  System.out.println(jxNode4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"web服务器\"><a href=\"#web服务器\" class=\"headerlink\" title=\"web服务器\"></a>web服务器</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li><p>软件架构</p>\n<ul>\n<li>C/S<ul>\n<li>客户端/服务器端</li>\n</ul>\n</li>\n<li>B/S<ul>\n<li>浏览器/服务器端</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>资源分类</p>\n<ul>\n<li>静态资源<ul>\n<li>所有用户访问后，得到的结构都是一样的。称为静态资源<ul>\n<li>html、CSS、Javascript</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态资源<ul>\n<li>每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。<ul>\n<li>servlet/JSP、php、asp</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>浏览器中有 [静态资源解析引擎]</p>\n<p>动态资源先转换为静态资源，然后被浏览器解析</p>\n<p>请求/响应</p>\n</li>\n<li><p>网络通信三要素</p>\n<ul>\n<li>IP<ul>\n<li>电子设备在网络中的唯一标识</li>\n</ul>\n</li>\n<li>端口<ul>\n<li>应用程序在计算机中的唯一表示。0～65536</li>\n</ul>\n</li>\n<li>传输协议<ul>\n<li>规定了数据传输的规则<ul>\n<li>TCP 安全协议，三次握手</li>\n<li>UDP 不安全协议。速度快。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"web服务器软件\"><a href=\"#web服务器软件\" class=\"headerlink\" title=\"web服务器软件\"></a>web服务器软件</h3><ul>\n<li><p>服务器</p>\n<ul>\n<li>安装了服务器软件的计算机</li>\n</ul>\n</li>\n<li><p>服务器软件</p>\n<ul>\n<li>接收用户的请求，处理请求，做出响应</li>\n</ul>\n</li>\n<li><p>WEB服务器软件</p>\n<ul>\n<li>在WEB服务器软件中，可以部署WEB项目，让用户通过浏览器来访问这些项目</li>\n<li>web容器</li>\n</ul>\n</li>\n<li><p>常见的Java相关的web服务器软件</p>\n<ul>\n<li>weblogic<ul>\n<li>oracle公司 大型的JavaEE服务器 支持所有的JavaEE规范 收费的</li>\n<li>JavaEE Java语言在企业级开发中使用的技术规范的总和。一共规定了13项大的规范。</li>\n</ul>\n</li>\n<li>webSphere<ul>\n<li>IBM公司 大型的JavaEE服务器 支持所有的JavaEE规范 收费的</li>\n</ul>\n</li>\n<li>JBOSS<ul>\n<li>JBOSS公司  大型的JavaEE服务器 支持所有的JavaEE规范 收费的</li>\n</ul>\n</li>\n<li>tomcat<ul>\n<li>apache基金组织 开源免费 中小型的JavaEE服务器 仅仅支持少量的JavaEE规范。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a>tomcat</h4><ul>\n<li><p>tomcat</p>\n<ul>\n<li><p>下载安装使用卸载 启动关闭配置</p>\n</li>\n<li><p>文件目录</p>\n<ul>\n<li>bin<ul>\n<li>可执行文件</li>\n</ul>\n</li>\n<li>conf<ul>\n<li>配置文件</li>\n</ul>\n</li>\n<li>lib<ul>\n<li>依赖jar包</li>\n</ul>\n</li>\n<li>logs<ul>\n<li>日志文件</li>\n</ul>\n</li>\n<li>temp<ul>\n<li>临时文件</li>\n</ul>\n</li>\n<li>webapps<ul>\n<li>存放web项目</li>\n</ul>\n</li>\n<li>work<ul>\n<li>存放运行时的数据</li>\n</ul>\n</li>\n<li>其他文件</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ul>\n<li><p>部署项目的方式</p>\n<ul>\n<li><p>直接将项目放到webapps目录下</p>\n<ul>\n<li>项目的访问路径–&gt;虚拟目录</li>\n<li>简化部署：将项目打成一个war包。再将war包房知道webapps目录下。war包会自动解压缩。</li>\n</ul>\n</li>\n<li><p>配置conf / server.xml 文件</p>\n<p>在&lt; Host&gt; 标签体中配置</p>\n<p>&lt; Context docBase=”项目存放的路径” path=”虚拟访问目录” /&gt;</p>\n<p>缺点：一般不使用该配置 只能配置单一项目</p>\n</li>\n<li><p>在conf \\ Catalina \\ localhost创建任意名称的xml文件。在文件中编写</p>\n<p>&lt; Context docBase=”项目存放的路径” /&gt; </p>\n<p>虚拟目录 = xml文件的名称</p>\n<p>优势：热部署方式</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>静态项目 和 动态项目</p>\n<ul>\n<li>目录结构<ul>\n<li>Java静态资源</li>\n<li>Java动态项目的目录结构<ul>\n<li>项目根目录</li>\n<li>WEB-INF目录<ul>\n<li>web.xml ： web项目的核心配置文件</li>\n<li>classes目录：放字节码文件的目录</li>\n<li>lib 目录：依赖的jar包</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>tomcat集成到idea中。创建JavaEE项目 部署项目</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"servlet\"><a href=\"#servlet\" class=\"headerlink\" title=\"servlet\"></a>servlet</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>servlet applet 运行在服务器端的小程序</p>\n<p>说明：</p>\n<p>浏览器通过路径访问服务器[动态资源：逻辑java代码–java类「依赖于服务器才能运行==tomcat执行它|==需要遵守一定的规则『Servlet』才能被tomcat所识别」]</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li>servlet就是一个接口，定义了Java类被浏览器访问 ( tomcat识别 ) 的规则</li>\n<li>自定义一个类，实现servlet接口，复写方法。</li>\n</ul>\n</li>\n<li><p>快速入门步骤</p>\n<ul>\n<li>创建JavaEE项目</li>\n<li>定义一个类，实现servlet接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Servlet</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现接口中的抽象方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提供服务的方法</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello servlet&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置servlet<ul>\n<li>类定义之后，浏览器通过URL访问。URL+具体资源名称映射到类的访问</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置servlet --&gt;</span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;com.example.web.servlet.ServletDemo1&lt;&#x2F;servlet-class&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet&gt;</span><br><span class=\"line\">    &lt;!-- URL路径和类的映射 --&gt;</span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;&#x2F;demo&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"执行原理\"><a href=\"#执行原理\" class=\"headerlink\" title=\"执行原理\"></a>执行原理</h3><ul>\n<li><p>原理</p>\n<p>URL路径 资源名称 –&gt; web.xml —&gt; tomcat将全类名对应的字节码文件加载进内存Class.forName()  ，创建对象，调用方法–service</p>\n<ul>\n<li>当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的servlet的资源路径。</li>\n<li>查找web.xml文件，是否有对应的url-pattern 标签体内容</li>\n<li>如果有，找到对应的 servlet-class 对应的全类名</li>\n<li>tomcat会将字节码文件加载斤内存，并且创建其对象</li>\n<li>调用其方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><ul>\n<li><p>servlet中的生命周期</p>\n<ul>\n<li><p>被创建：执行init方法，只执行一次</p>\n<ul>\n<li><p>servlet什么时候被创建</p>\n<ul>\n<li>默认情况下，第一次被访问时，servlet被创建</li>\n<li>可以配置执行servlet的创建时机 </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo2<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.example.web.servlet.ServletDemo2<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 指定 servlet 的创建时机</span></span><br><span class=\"line\"><span class=\"comment\">            1、第一次被访问时创建</span></span><br><span class=\"line\"><span class=\"comment\">                load-on-startup 值为负数。默认值-1</span></span><br><span class=\"line\"><span class=\"comment\">            2、在服务器启动时创建</span></span><br><span class=\"line\"><span class=\"comment\">                load-on-startup 值为0或正整数 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Servlet 的init方法，只执行一次，说明一个servlet在内存中只存在一个对象。servlet是单例的。</p>\n<ul>\n<li>多个用户同时访问时，可能存在线程安全问题。<ul>\n<li>解决：尽量不要在servlet中定义成员变量。即使定义了成员变量，也不要修改值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>提供服务：执行service方法，执行多次</p>\n<ul>\n<li>每次访问servlet时，service方法都会被调用一次。</li>\n</ul>\n</li>\n<li><p>被销毁：执行destroy方法，只执行一次【servlet被销毁之前执行！一般用于释放资源】</p>\n<ul>\n<li>servlet被销毁时执行。服务器关闭时，servlet被销毁。</li>\n<li>只有服务器正常关闭时，才会执行destroy方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.1&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置servlet --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo1<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.example.web.servlet.ServletDemo1<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- URL路径和类的映射 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo1<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/demo<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo2<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.example.web.servlet.ServletDemo2<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 指定 servlet 的创建时机</span></span><br><span class=\"line\"><span class=\"comment\">            1、第一次被访问时创建</span></span><br><span class=\"line\"><span class=\"comment\">                load-on-startup 值为负数。默认值-1</span></span><br><span class=\"line\"><span class=\"comment\">            2、在服务器启动时创建</span></span><br><span class=\"line\"><span class=\"comment\">                load-on-startup 值为0或正整数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- URL路径和类的映射 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>demo2<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/demo2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"servlet注解配置\"><a href=\"#servlet注解配置\" class=\"headerlink\" title=\"servlet注解配置\"></a>servlet注解配置</h3><ul>\n<li>servlet3.0<ul>\n<li>支持注解配置。可以不需要web.xml</li>\n<li>步骤<ul>\n<li>创建JavaEE项目，选择servlet版本3.0以上。可以不创建web.xml</li>\n<li>定义一个类，实现servlet接口</li>\n<li>复写方法</li>\n<li>在类上使用@WebServlet注解进行配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = &quot;/demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig servletConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....servlet 3.0......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>IDEA与tomcat的相关配置<ul>\n<li>idea会为每一个tomcat部署的项目单独建立一份配置文件<ul>\n<li>查看控制台的log输出：CATALINA_BASE</li>\n</ul>\n</li>\n<li>工作空间项目          和          tomcat部署的web项目<ul>\n<li>tomcat真正访问的是“tomcat部署的web项目”</li>\n<li>“tomcat部署的web项目”对应着“工作空间项目” 的web目录下的所有资源</li>\n<li>WEB_INF目录下的资源不能被浏览器直接访问</li>\n<li>断点调试</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>servlet体系结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123; <span class=\"comment\">// 接口</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Servlet</span>, <span class=\"title\">ServletConfig</span>, <span class=\"title\">Serializable</span> </span>&#123; <span class=\"comment\">// 抽象类</span></span><br><span class=\"line\">  <span class=\"comment\">// 将servlet接口中的其他的方法做了默认空实现，只将service()方法做了抽象</span></span><br><span class=\"line\">  \t<span class=\"comment\">// 将来定义servlet类时，可以集成GenericServlet，实现service()方法即可</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericServlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// doGet</span></span><br><span class=\"line\">  <span class=\"comment\">// doPost</span></span><br><span class=\"line\">  <span class=\"comment\">// 对http协议的一种封装，简化操作</span></span><br><span class=\"line\">  \t<span class=\"comment\">// 定义类继承HttpServlet， 复写 doGet doPost[表单提交]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>service() 方法作用</p>\n<p>​    1、获取请求方式</p>\n<p>​        String method  =  req.getMetod();    //GET.   POST</p>\n<p>​    2、获取数据</p>\n<ul>\n<li>servlet配置<ul>\n<li>Urlparttern: servlet访问路径<ul>\n<li>一个servlet可以定义多个访问路径 ： @WebServlet({“/demo3”,”/demo4”})</li>\n</ul>\n</li>\n<li>路径定义规则<ul>\n<li>/xxx</li>\n<li>/xxxx/xxx <ul>\n<li>多层路径 目录结构 @WebServlet(“/demo/demo4”)</li>\n</ul>\n</li>\n<li>*.do   <ul>\n<li>@WebServlet(“/*.do”)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>​    超文本传输协议</p>\n<p>​    传输协议：客户端和服务端通信时，发送数据的格式</p>\n<p>​    特点</p>\n<p>​            1、基于TCP(安全的 三次握手)/UDP的高级协议</p>\n<p>​            2、默认端口号 80</p>\n<p>​            3、基于请求/响应模型：一次请求对应一次响应</p>\n<p>​            4、无状态的：每次请求之间相互独立，不能交互数据</p>\n<p>​    历史版本</p>\n<p>​    1.0 每一次请求响应都会建立新的连接 对缓存的支持比较好</p>\n<p>​    1.1 复用连接</p>\n<h3 id=\"请求-响应消息数据格式\"><a href=\"#请求-响应消息数据格式\" class=\"headerlink\" title=\"请求/响应消息数据格式\"></a>请求/响应消息数据格式</h3><p>请求消息数据格式</p>\n<table>\n<thead>\n<tr>\n<th>请求行</th>\n<th>请求头</th>\n<th>请求头</th>\n<th>请求体(正文)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>请求方式   请求URL   请求协议/版本<br />GET            /xxx           HTTP/1.1</td>\n<td>请求头名称  请求值</td>\n<td>空行<br />用于分割POST请求的请求头和请求体的</td>\n<td>参数<br />封装POST请求消息的请求参数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>请求方式<ul>\n<li>HTTP协议有7中请求方式 常用的两种 GET/POST<ul>\n<li>GET<ul>\n<li>请求参数在请求行中，在URL后</li>\n<li>请求的URL长度是有限制的</li>\n</ul>\n</li>\n<li>POST<ul>\n<li>请求参数在请求体中</li>\n<li>请求的URL长度没有限制的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常见的请求头：客户端浏览器告诉服务器一些信息<ul>\n<li>Urse-Agent：浏览器告诉服务器，访问使用的浏览器版本信息<ul>\n<li>可以在服务器端获取该头的信息，可以解决浏览器的兼容性问题</li>\n</ul>\n</li>\n<li>Referer：<ul>\n<li>告诉服务器，当前请求从哪里来<ul>\n<li>防盗链</li>\n<li>统计工作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a>Request</h2><h3 id=\"request对象和response对象的原理\"><a href=\"#request对象和response对象的原理\" class=\"headerlink\" title=\"request对象和response对象的原理\"></a>request对象和response对象的原理</h3><p>1、tomcat服务器会根据请求URL中的资源路径，创建对应的ServletDemo1的对象。</p>\n<p>2、tomcat服务器，会创建request和response对象，request对象中封装请求消息数据。</p>\n<p>3、tomcat将request和response两个对象传递给service方法，并且调用service方法。</p>\n<p>4、通过request对象获取请求消息数据，通过response对象设置响应消息数据。</p>\n<p>5、服务器给浏览器做出响应之前，会从response对象中那程序设置的响应消息数据。</p>\n<p>注：</p>\n<p>1、request和response对象是由服务器创建的。我们来使用它们</p>\n<p>2、request对象是来获取请求消息，response对象是来设置响应消息。</p>\n<h3 id=\"request对象继承体系结构\"><a href=\"#request对象继承体系结构\" class=\"headerlink\" title=\"request对象继承体系结构\"></a>request对象继承体系结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface HttpServletRequest extends ServletRequest &#123;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"request功能\"><a href=\"#request功能\" class=\"headerlink\" title=\"request功能\"></a>request功能</h3><p>1、 获取请求消息</p>\n<p>​    获取请求行数据 </p>\n<ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.web.request;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/requestDemo1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestDemo1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求方法</span></span><br><span class=\"line\">        String method = req.getMethod();</span><br><span class=\"line\">        System.out.println(method); <span class=\"comment\">// GET</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.获取虚拟目录</span></span><br><span class=\"line\">        String contextPath = req.getContextPath();</span><br><span class=\"line\">        System.out.println(contextPath); <span class=\"comment\">// /servlet</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.获取servlet路径</span></span><br><span class=\"line\">        String servletPath = req.getServletPath();</span><br><span class=\"line\">        System.out.println(servletPath); <span class=\"comment\">// /requestDemo1</span></span><br><span class=\"line\">        <span class=\"comment\">// 4.获取get方式请求参数</span></span><br><span class=\"line\">        String queryString = req.getQueryString();</span><br><span class=\"line\">        System.out.println(queryString); <span class=\"comment\">// name=wu</span></span><br><span class=\"line\">        <span class=\"comment\">// 5.获取请求URL</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        URL 统一资源定位符</span></span><br><span class=\"line\"><span class=\"comment\">        URI 统一资源标识符</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String requestURI = req.getRequestURI();</span><br><span class=\"line\">        System.out.println(requestURI);  <span class=\"comment\">// /servlet/requestDemo1</span></span><br><span class=\"line\">        StringBuffer requestURL = req.getRequestURL();</span><br><span class=\"line\">        System.out.println(requestURL); <span class=\"comment\">// http://localhost:8080/servlet/requestDemo1</span></span><br><span class=\"line\">        <span class=\"comment\">// 6.获取协议及版本</span></span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        System.out.println(protocol); <span class=\"comment\">// HTTP/1.1</span></span><br><span class=\"line\">        <span class=\"comment\">// 7.获取客户机的IP地址</span></span><br><span class=\"line\">        String remoteAddr = req.getRemoteAddr();</span><br><span class=\"line\">        System.out.println(remoteAddr); <span class=\"comment\">// 0:0:0:0:0:0:0:1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    获取请求头数据</p>\n<ul>\n<li>方法</li>\n</ul>\n<p>​    获取请求体数据</p>\n<p>2、其他</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/04/23/mybatis/",
            "url": "http://example.com/2021/04/23/mybatis/",
            "title": "Mybatis",
            "date_published": "2021-04-23T05:09:55.168Z",
            "content_html": "<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>框架</p>\n<ul>\n<li>软件开发中的一套解决方案，不同的框架解决不同的问题。mybatis层框架解决持久层问题。</li>\n<li>框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提供开发效率。</li>\n</ul>\n</li>\n<li><p>三层架构</p>\n<ul>\n<li>表现层<ul>\n<li>展示数据</li>\n</ul>\n</li>\n<li>业务层<ul>\n<li>处理业务需求</li>\n</ul>\n</li>\n<li>持久层<ul>\n<li>和数据库交互</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/ssm_20210419230439.png\" alt=\"image-20210419230431563\"></p>\n<ul>\n<li><p>持久层技术解决方案</p>\n<ul>\n<li>JDBC技术<ul>\n<li>Connection</li>\n<li>PreparedStatement</li>\n<li>ResultSet</li>\n</ul>\n</li>\n<li>Spring的JdbcTemplate<ul>\n<li>Spring中对jdbc的简单封装</li>\n</ul>\n</li>\n<li>Apache的DButils<ul>\n<li>也是对Jdbc的简单封装</li>\n</ul>\n</li>\n</ul>\n<p>——–只是工具类</p>\n</li>\n<li><p>mybatis框架概述</p>\n<ul>\n<li>基于Java的持久层框架，内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li>\n<li>它使用了ORM思想实现了结果集的封装。</li>\n<li>ORM object relational mapping 对象关系映射<ul>\n<li>把数据库表和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>环境搭建</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 1、创建maven工程并导入坐标</li>\n<li><input disabled=\"\" type=\"checkbox\"> 2、创建实体类和dao的接口</li>\n<li><input disabled=\"\" type=\"checkbox\"> 3、创建mybatis的主配置文件 SqlMapConfig.xml</li>\n<li><input disabled=\"\" type=\"checkbox\"> 4、创建映射配置文件 IUserDao.xml</li>\n</ul>\n</li>\n</ul>\n<p>注意事项</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 1、创建IUserDao.xml和 IUserDao.java 时名称是为了和我们之前的知识保持一致。在mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper。所以IUserDao 和 IUserMapper是一样的。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 2、idea中创建目录和包是不一样的。包在创建时co m.example.dao它是三级结构。目录在创建时com.example.dao是一级目录。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 3、mybatis的映射配置文件位置必须和dao接口的包结构相同。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 4、映射配置文件的mapper标签的namespace属性的取值必须是dao接口的全限定类名。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 5、映射配置文件的操作属性，id属性的取值必须是dao接口的方法名</li>\n</ul>\n<p>当遵从了三、四、五之后，开发中就无须再写dao的实现类。</p>\n<h4 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h4><p>SqlMapConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis主配置文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置环境 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置mysql环境 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置事务类型 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">transactionManager</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置数据源(连接池)--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/demo&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定映射配置文件的位置 映射配置文件指的是每个dao独立的配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;com/example/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.读取配置文件</span></span><br><span class=\"line\">InputStream in = Resources.getResourceAsStream(<span class=\"string\">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.创建 SqlSessionFactory 工厂</span></span><br><span class=\"line\"><span class=\"comment\">// mybatis 通过SqlSessionFactoryBuilder的build 解析配置文件、细节封装</span></span><br><span class=\"line\">SqlSessionFactoryBuilder builder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</span><br><span class=\"line\">SqlSessionFactory factory = builder.build(in);</span><br><span class=\"line\"><span class=\"comment\">//3.使用工厂生产SqlSession对象</span></span><br><span class=\"line\">SqlSession sqlSession = factory.openSession();</span><br><span class=\"line\"><span class=\"comment\">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class=\"line\">IUserDao userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class=\"line\"><span class=\"comment\">//5.使用代理对象执行方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findAll();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (User user : users) &#123;</span><br><span class=\"line\">System.out.println(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//6.释放资源</span></span><br><span class=\"line\">sqlSession.close();</span><br><span class=\"line\">in.close();</span><br></pre></td></tr></table></figure>\n\n<p>注意事项</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 在映射配置中告知mybatis要封装到哪个实体类中； 配置的方式：指定实体类的全限定类名</li>\n</ul>\n<p>IUserDao.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.example.dao.IUserDao&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置查询所有 resultXXXX 配置结果集封装到哪--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findAll&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"通过注解配置\"><a href=\"#通过注解配置\" class=\"headerlink\" title=\"通过注解配置\"></a>通过注解配置</h5><p>SqlMapConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis主配置文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置环境 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置mysql环境 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置事务类型 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">transactionManager</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置数据源(连接池)--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/demo&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定映射配置文件的位置 映射配置文件指的是每个dao独立的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;mapper resource=&quot;com/example/dao/IUserDao.xml&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        如果是用注解来配置的话，此处应该使用class属性指定被注解的dao的全限定类名</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;mapper class=&quot;com.example.dao.IUserDao&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.dao.IUserDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>IUserDao.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wuyueping</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户的持久层接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUserDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from user&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"写dao实现类的方式\"><a href=\"#写dao实现类的方式\" class=\"headerlink\" title=\"写dao实现类的方式\"></a>写dao实现类的方式</h5><p>UserDaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.dao.IUserDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDaoImpl</span><span class=\"params\">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.使用工厂创建 SqlSession</span></span><br><span class=\"line\">        SqlSession session = factory.openSession();</span><br><span class=\"line\">        <span class=\"comment\">//2.使用session执行查询所有方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 不写语句 该为通过配置拿到语句</span></span><br><span class=\"line\">        List&lt;User&gt; users = session.selectList(<span class=\"string\">&quot;com.example.dao.IUserDao.findAll&quot;</span>);</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        <span class=\"comment\">//3.返回查询结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第四步就可以不使用代理了 直接传factory到实现类</p>\n<p>main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.dao.IUserDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.dao.impl.UserDaoImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.读取配置文件</span></span><br><span class=\"line\">        InputStream in = Resources.getResourceAsStream(<span class=\"string\">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.创建 SqlSessionFactory 工厂</span></span><br><span class=\"line\">        <span class=\"comment\">// mybatis 通过SqlSessionFactoryBuilder的build 解析配置文件、细节封装</span></span><br><span class=\"line\">        SqlSessionFactoryBuilder builder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</span><br><span class=\"line\">        SqlSessionFactory factory = builder.build(in);</span><br><span class=\"line\">        <span class=\"comment\">//3.使用工厂生产SqlSession对象</span></span><br><span class=\"line\">        SqlSession sqlSession = factory.openSession();</span><br><span class=\"line\">        <span class=\"comment\">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class=\"line\">        <span class=\"comment\">// IUserDao userDao = sqlSession.getMapper(IUserDao.class);</span></span><br><span class=\"line\">        IUserDao userDao = <span class=\"keyword\">new</span> UserDaoImpl(factory);</span><br><span class=\"line\">        <span class=\"comment\">//5.使用代理对象执行方法</span></span><br><span class=\"line\">        List&lt;User&gt; users = userDao.findAll();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user : users) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//6.释放资源</span></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/wuyueping/images/raw/master/img/20210423125125.png\" alt=\"image-20210422114602540\" style=\"zoom:50%;\" />\n\n<p>main代码分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.读取配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1、使用类加载器，它只能读取类路径的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">2、使用servletContext对象的getRealPath()</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 绝对路径 、相对路径(X)</span></span><br><span class=\"line\">InputStream in = Resources.getResourceAsStream(<span class=\"string\">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.创建 SqlSessionFactory 工厂</span></span><br><span class=\"line\"><span class=\"comment\">// mybatis 通过SqlSessionFactoryBuilder的build 解析配置文件、细节封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">创建工厂mybatis使用了[构建者模式]</span></span><br><span class=\"line\"><span class=\"comment\">构建者模式： SqlSessionFactor构建者 不用在意细节 只关注结果</span></span><br><span class=\"line\"><span class=\"comment\">优势：把对象的创建细节隐藏，使使用者直接调用方法即可拿到对象</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">生产SqlSession使用了工厂模式</span></span><br><span class=\"line\"><span class=\"comment\">优势：解耦 降低类之间的依赖关系</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">getMapper 创建Da接口实现类代理模式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">SqlSessionFactoryBuilder builder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</span><br><span class=\"line\">SqlSessionFactory factory = builder.build(in);</span><br><span class=\"line\"><span class=\"comment\">//3.使用工厂生产SqlSession对象</span></span><br><span class=\"line\">SqlSession sqlSession = factory.openSession();</span><br><span class=\"line\"><span class=\"comment\">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class=\"line\">IUserDao userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class=\"line\"><span class=\"comment\">// IUserDao userDao = new UserDaoImpl(factory);</span></span><br><span class=\"line\"><span class=\"comment\">//5.使用代理对象执行方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findAll();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (User user : users) &#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//6.释放资源</span></span><br><span class=\"line\">sqlSession.close();</span><br><span class=\"line\">in.close();</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"查询所有的分析\"><a href=\"#查询所有的分析\" class=\"headerlink\" title=\"查询所有的分析\"></a>查询所有的分析</h5><ul>\n<li><input disabled=\"\" type=\"checkbox\"> mybatis 在使用代理dao的方式实现增删改查时做了什么 ?<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 1、创建代理对象</li>\n<li><input disabled=\"\" type=\"checkbox\"> 2、在代理对象中调用selectList</li>\n</ul>\n</li>\n</ul>\n<p>执行查询的分析</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 读取配置文件<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 用到的技术就是解析XML的技术：此处用的是dom4j解析XML技术</li>\n</ul>\n</li>\n</ul>\n<p><strong>关键！！！</strong></p>\n<ol>\n<li><p><strong>连接信息</strong></p>\n</li>\n<li><p><strong>映射信息</strong></p>\n<ul>\n<li><strong>执行的SQL语句</strong></li>\n<li><strong>封装结果的实体类全限定类名</strong></li>\n</ul>\n<p><strong>把这两个信息结合起来定义成一个对象</strong></p>\n</li>\n</ol>\n<p>1、根据配置文件的信息创建connection对象</p>\n<p>​    注册驱动、获取链接</p>\n<p>2、获取预处理对象preparedstatement</p>\n<p>​    此时需要SQL语句 conn.prepareStatement(sql)</p>\n<p>3、执行查询</p>\n<p>​    ResultSet resultSet = preparedStatement.executeQuery();</p>\n<p>4、遍历结果集用于封装</p>\n<p>​        List&lt; E &gt; list = new ArrayList&lt;&gt;();</p>\n<p>​        while(resultSet.next()) {</p>\n<p>​            E element = Class.forName(配置的全限定类名).newInstance() <em>反射封装</em></p>\n<p>​            进行封装 把每个rs的内容都添加到element中</p>\n<p>​            实体类属性和表中的列名是一致的。就可以把表中的列名看成是实体类的属性名称。就可以使用反射的方式来根据名称获取每个属性，并把值赋进去。</p>\n<p>​            把element加入到list中</p>\n<p>​            list.add(element)</p>\n<p>​        }</p>\n<p>5、返回list集合</p>\n<h5 id=\"创建代理对象分析\"><a href=\"#创建代理对象分析\" class=\"headerlink\" title=\"创建代理对象分析\"></a>创建代理对象分析</h5><p>根据dao接口的字节码创建dao的代理对象</p>\n<p>getMapper {</p>\n<p>/*</p>\n<p>类加载器：使用的和被代理对象是相同的类加载器</p>\n<p>代理对象要实现的接口：和被代理对象实现相同的接口</p>\n<p>如何代理：增强的方法。此处是一个InvocationHandler的接口，需要写一个该接口的实现类，在实现类中调用selectList方法</p>\n<p>*/</p>\n<p>Proxy.newProxyInstance(类加载器，代理对象要实现的接口字节码数组)</p>\n<p>}</p>\n<h5 id=\"自定义mybatis\"><a href=\"#自定义mybatis\" class=\"headerlink\" title=\"自定义mybatis\"></a>自定义mybatis</h5><table>\n<thead>\n<tr>\n<th>class</th>\n<th>Resources</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td>SqlSessionFactoryBuilder</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>SqlSessionFactory</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>SqlSession</td>\n</tr>\n</tbody></table>\n<p>去掉</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>增加</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/04/23/hello-world/",
            "url": "http://example.com/2021/04/23/hello-world/",
            "title": "Hello World",
            "date_published": "2021-04-23T05:04:56.957Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/02/02/zookeeper/",
            "url": "http://example.com/2021/02/02/zookeeper/",
            "title": "zookeeper",
            "date_published": "2021-02-02T11:55:31.723Z",
            "content_html": "<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li>Zookeeper 动物管理员</li>\n<li>在整个大数据生态体系中，zookeeper相当于润滑剂，协调整个大数据框架体系。大数据当中的配置信息。</li>\n<li>开源的分布式的[多台服务器处理同一个事]，为分布式应用提供协调服务的Apache项目。</li>\n</ul>\n<h3 id=\"工作机制\"><a href=\"#工作机制\" class=\"headerlink\" title=\"工作机制\"></a>工作机制</h3><ul>\n<li><p>从设计模式角度来理解：是基于[观察者模式设计]的分布式服务管理框架，它负责存储和管理大家关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，zookeeper就将负责通知已经在zookeeper上注册的那些观察者做出相应的反应。</p>\n</li>\n<li><p>文件系统 + 通知机制</p>\n<p>存储数据[服务器信息] + 节点变化通知</p>\n</li>\n</ul>\n<p>设计模式???</p>\n<ol>\n<li>服务器启动后，zookeeper写入服务器信息</li>\n<li>客户端获取当前服务器信息，并且注册监听</li>\n<li>服务器宕机</li>\n<li>zookeeper通知客户端服务器宕机</li>\n<li>客户端重新获取服务器列表信息，并注册监听</li>\n</ol>\n<p>![image-20211005102757860](/Users/wuyueping/Library/Application Support/typora-user-images/image-20211005102757860.png)</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>一个领导者leader，多个follower组成的集群</li>\n<li>集群中只要有半数以上的节点存活，zookeeper集群就能正常服务</li>\n<li>全局数据一致[配置文件/核心信息]；每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一直的。</li>\n<li>更新请求顺序进行，来自同一个client的更新请求按其发送[顺序依次]执行。</li>\n<li>数据更新原子性，一次数据更新要么成功，要么失败。[事务特点]</li>\n<li>实时性，在一定时间范围内，client能读到最新数据。[数据量小更新快]</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005103537.png\" alt=\"335151BD-001F-4967-B288-2830CBCBDDD3\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><ul>\n<li>zookeeper数据模型的结构与unix文件系统很类似。</li>\n<li>整体上可以看作是一棵树，每个节点称做一个znode。每一个znode默认能够存储1MB的数据，每个znode都可以通过其路径唯一标识。</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005103903.png\" alt=\"82D33714-91A6-426B-9770-76BB2CBA7B57\"></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>统一命名服务在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。例：IP不容易记住，而域名容易记住。客户端访问统一域名<a href=\"http://www.baidu.com.zookeeper分配客户端访问的ip/\">www.baidu.com。zookeeper分配客户端访问的IP</a><ul>\n<li>对应用/服务进行统一命名，便于识别。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005104201.png\" alt=\"image-20211005104159556\"></p>\n<ul>\n<li>统一配置管理<ul>\n<li>分布式环境下，配置文件同步非常常见<ul>\n<li>一般要求一个集群中，所有节点的配置信息是一致的，比如Kafka集群。</li>\n<li>对配置文件修改后，希望能够快速同步到各个节点上。</li>\n</ul>\n</li>\n<li>配置管理可交由zookeeper实现。<ul>\n<li>可将配置信息写入zookeeper伤的一个zone。</li>\n<li>各个客户端服务器监听这个znode。</li>\n<li>一旦znode中的数据被修改，zookeeper将通知各个客户端服务器。[监听机制]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005104627.png\" alt=\"image-20211005104625664\"></p>\n<ul>\n<li>统一集群管理<ul>\n<li>实时掌握每个节点的状态是必要的。<ul>\n<li>可根据节点实时状态做出一些调整。</li>\n</ul>\n</li>\n<li>可以实现实时监控节点状态变化<ul>\n<li>可将节点信息写入zookeeper上的一个znode。</li>\n<li>监听这个znode可获取它的实时状态变化</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005104958.png\" alt=\"image-20211005104957749\"></p>\n<ul>\n<li>服务器动态上下线<ul>\n<li>客户端能实时洞察到服务器上下线的变化</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005105106.png\" alt=\"image-20211005105105545\"></p>\n<ul>\n<li>软负载均衡<ul>\n<li>在zookeeper中记录每台服务器的访问数，让[访问数最少的服务器]去处理最新的客户端请求</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/wuyueping/images/raw/master/img/zookeeper_20211005105201.png\" alt=\"image-20211005105200521\"></p>\n<h1 id=\"zookeeper内部原理\"><a href=\"#zookeeper内部原理\" class=\"headerlink\" title=\"zookeeper内部原理\"></a>zookeeper内部原理</h1><h3 id=\"选举机制\"><a href=\"#选举机制\" class=\"headerlink\" title=\"选举机制\"></a>选举机制</h3><ul>\n<li>半数机制：集群中半数以上机器存活，集群可用。所以zookeeper适合安装奇数台服务器。</li>\n<li> zookeeper工作时，是有一个节点为leader，其他则为follower，leader是通过内部的选举机制临时产生的。</li>\n</ul>\n<h3 id=\"节点类型\"><a href=\"#节点类型\" class=\"headerlink\" title=\"节点类型\"></a>节点类型</h3><ul>\n<li>持久：客户端和服务器断开连接后，创建的节点不删除。<ul>\n<li>持久化目录节点<ul>\n<li>客户端与zookeeper断开连接后，该节点依旧存在</li>\n</ul>\n</li>\n<li>持久化顺序编号目录节点<ul>\n<li>客户端与zookeeper断开连接后，该节点依旧存在，只是zookeeper给该节点的名称进行顺序编号。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>短暂：客户端和服务器断开连接后，创建的节点自己删除。<ul>\n<li>临时目录节点</li>\n<li>临时顺序编号目录节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"stat结构体\"><a href=\"#stat结构体\" class=\"headerlink\" title=\"stat结构体\"></a>stat结构体</h3><h3 id=\"监听器原理\"><a href=\"#监听器原理\" class=\"headerlink\" title=\"监听器原理\"></a>监听器原理</h3><ul>\n<li>首先要有一个main线程</li>\n<li>在main线程中创建zookeeper客户端，这时就会创建两个线程，一个负责网络连接通信connect，一个负责监听listener</li>\n<li>通过connect线程将注册的监听事件发送给zookeeper</li>\n<li>在zookeeper的注册监听列表中将注册的监听事件添加到列表中</li>\n<li>zookeepe监听到有数据或路径变化，就会将这个消息发送给listener线程。</li>\n<li>listener线程内部调用了process方法</li>\n<li>常见的监听<ul>\n<li>监听节点数据的变化</li>\n<li>监听子节点增减的变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"写数据的流程\"><a href=\"#写数据的流程\" class=\"headerlink\" title=\"写数据的流程\"></a>写数据的流程</h3><ul>\n<li>客户端向zookeeper的server1上写数据</li>\n<li>如果server1不是leader，那么server1会把接收到的请求进一步转发给leader，因为每个zookeeper的server里面有一个是leader。这个leader会将写请求广播给各个server，各个server写成功后就会通知leader。</li>\n<li>当leader收到大多数server数据写成功了，那么就说明数据写成功了（半数以上）。写成功之后，leader会告诉server1数据写成功了。</li>\n<li>server1会进一步通知客户端数据写成功了，这时就认为整个写操作成功。</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h4 id=\"mac安装zookeeper-通过homebrew\"><a href=\"#mac安装zookeeper-通过homebrew\" class=\"headerlink\" title=\"mac安装zookeeper (通过homebrew)\"></a>mac安装zookeeper (通过homebrew)</h4><p>[参考文章] <a href=\"https://segmentfault.com/a/1190000022287477\">mac zookeeper安装使用</a></p>\n<h3 id=\"本地模式安装部署\"><a href=\"#本地模式安装部署\" class=\"headerlink\" title=\"本地模式安装部署\"></a>本地模式安装部署</h3><h2 id=\"配置参数解读\"><a href=\"#配置参数解读\" class=\"headerlink\" title=\"配置参数解读\"></a>配置参数解读</h2><h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h2 id=\"分布式安装部署\"><a href=\"#分布式安装部署\" class=\"headerlink\" title=\"分布式安装部署\"></a>分布式安装部署</h2><h2 id=\"客户短命令行操作\"><a href=\"#客户短命令行操作\" class=\"headerlink\" title=\"客户短命令行操作\"></a>客户短命令行操作</h2><h1 id=\"api应用\"><a href=\"#api应用\" class=\"headerlink\" title=\"api应用\"></a>api应用</h1>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/02/02/redis/",
            "url": "http://example.com/2021/02/02/redis/",
            "title": "Redis",
            "date_published": "2021-02-02T10:01:20.971Z",
            "content_html": "<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><ul>\n<li>特点 ：缓存产品<ul>\n<li>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>不仅仅支持简单的key-value类型的数据，同时还提供list,set,zset,hash等数据结构的存储。</li>\n<li>支持数据的备份，即master-slave模式的数据备份。</li>\n</ul>\n</li>\n<li>优势<ul>\n<li>性能极高：读写速度快。</li>\n<li>丰富的数据类型：支持二进制案例的string lists hashes sets ordered sets 数据类型操作。</li>\n<li>原子==要没成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务（原子性），通过multi和exec指令包起来。</li>\n<li>丰富的特性：还支持publish/subscribe，通知，key过期等。</li>\n</ul>\n</li>\n<li></li>\n</ul>\n",
            "tags": []
        }
    ]
}